/*
Host Activation Service

Testing UICSRAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package infra_provision

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/infobloxopen/bloxone-go-client/infra_provision"
)

func TestUICSRAPIService(t *testing.T) {

	apiClient := infra_provision.NewAPIClient()

	t.Run("Test UICSRAPIService UICSRApprove", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var activationCode string

		resp, httpRes, err := apiClient.UICSRAPI.UICSRApprove(context.Background(), activationCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UICSRAPIService UICSRDeny", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var activationCode string

		resp, httpRes, err := apiClient.UICSRAPI.UICSRDeny(context.Background(), activationCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UICSRAPIService UICSRList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UICSRAPI.UICSRList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UICSRAPIService UICSRRevoke", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var certSerial string

		resp, httpRes, err := apiClient.UICSRAPI.UICSRRevoke(context.Background(), certSerial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UICSRAPIService UICSRRevoke2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ophid string

		resp, httpRes, err := apiClient.UICSRAPI.UICSRRevoke2(context.Background(), ophid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
