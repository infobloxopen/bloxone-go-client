/*
BloxOne Anycast API

Testing OnPremAnycastManagerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package anycast

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/infobloxopen/bloxone-go-client/anycast"
	"github.com/infobloxopen/bloxone-go-client/internal"
)

func Test_anycast_OnPremAnycastManagerAPIService(t *testing.T) {

	configuration := internal.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerCreateAnycastConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerCreateAnycastConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerCreateAnycastVersion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerCreateAnycastVersion(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerDeleteAnycastConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerDeleteAnycastConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerDeleteAnycastVersion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerDeleteAnycastVersion(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerDeleteOnpremHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerDeleteOnpremHost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetAnycastConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetAnycastConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetAnycastConfigList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetAnycastConfigList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetAnycastVersion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetAnycastVersion(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetOnpremConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ophid string
		var version string

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetOnpremConfig(context.Background(), ophid, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetOnpremConfig2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ophid string
		var version string

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetOnpremConfig2(context.Background(), ophid, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetOnpremHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetOnpremHost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ophid string

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetStatus(context.Background(), ophid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerGetStatus2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ophid string

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerGetStatus2(context.Background(), ophid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerListAnycastConfigsWithRuntimeStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerListAnycastConfigsWithRuntimeStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerReadAnycastConfigWithRuntimeStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerReadAnycastConfigWithRuntimeStatus(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerUpdateAnycastConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerUpdateAnycastConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OnPremAnycastManagerAPIService OnPremAnycastManagerUpdateOnpremHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OnPremAnycastManagerAPI.OnPremAnycastManagerUpdateOnpremHost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
