/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the GenerateConfigBundleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateConfigBundleResponse{}

// GenerateConfigBundleResponse The response format to retrieve __ConfigBundle__ objects.
type GenerateConfigBundleResponse struct {
	Config               *ConfigObject `json:"config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GenerateConfigBundleResponse GenerateConfigBundleResponse

// NewGenerateConfigBundleResponse instantiates a new GenerateConfigBundleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateConfigBundleResponse() *GenerateConfigBundleResponse {
	this := GenerateConfigBundleResponse{}
	return &this
}

// NewGenerateConfigBundleResponseWithDefaults instantiates a new GenerateConfigBundleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateConfigBundleResponseWithDefaults() *GenerateConfigBundleResponse {
	this := GenerateConfigBundleResponse{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *GenerateConfigBundleResponse) GetConfig() ConfigObject {
	if o == nil || IsNil(o.Config) {
		var ret ConfigObject
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateConfigBundleResponse) GetConfigOk() (*ConfigObject, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *GenerateConfigBundleResponse) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ConfigObject and assigns it to the Config field.
func (o *GenerateConfigBundleResponse) SetConfig(v ConfigObject) {
	o.Config = &v
}

func (o GenerateConfigBundleResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateConfigBundleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenerateConfigBundleResponse) UnmarshalJSON(data []byte) (err error) {
	varGenerateConfigBundleResponse := _GenerateConfigBundleResponse{}

	err = json.Unmarshal(data, &varGenerateConfigBundleResponse)

	if err != nil {
		return err
	}

	*o = GenerateConfigBundleResponse(varGenerateConfigBundleResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenerateConfigBundleResponse struct {
	value *GenerateConfigBundleResponse
	isSet bool
}

func (v NullableGenerateConfigBundleResponse) Get() *GenerateConfigBundleResponse {
	return v.value
}

func (v *NullableGenerateConfigBundleResponse) Set(val *GenerateConfigBundleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateConfigBundleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateConfigBundleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateConfigBundleResponse(val *GenerateConfigBundleResponse) *NullableGenerateConfigBundleResponse {
	return &NullableGenerateConfigBundleResponse{value: val, isSet: true}
}

func (v NullableGenerateConfigBundleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateConfigBundleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
