/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the FederationConfigObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FederationConfigObject{}

// FederationConfigObject struct for FederationConfigObject
type FederationConfigObject struct {
	ConfigBody           *string `json:"configBody,omitempty"`
	Ophid                *string `json:"ophid,omitempty"`
	Version              *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FederationConfigObject FederationConfigObject

// NewFederationConfigObject instantiates a new FederationConfigObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFederationConfigObject() *FederationConfigObject {
	this := FederationConfigObject{}
	return &this
}

// NewFederationConfigObjectWithDefaults instantiates a new FederationConfigObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFederationConfigObjectWithDefaults() *FederationConfigObject {
	this := FederationConfigObject{}
	return &this
}

// GetConfigBody returns the ConfigBody field value if set, zero value otherwise.
func (o *FederationConfigObject) GetConfigBody() string {
	if o == nil || IsNil(o.ConfigBody) {
		var ret string
		return ret
	}
	return *o.ConfigBody
}

// GetConfigBodyOk returns a tuple with the ConfigBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationConfigObject) GetConfigBodyOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigBody) {
		return nil, false
	}
	return o.ConfigBody, true
}

// HasConfigBody returns a boolean if a field has been set.
func (o *FederationConfigObject) HasConfigBody() bool {
	if o != nil && !IsNil(o.ConfigBody) {
		return true
	}

	return false
}

// SetConfigBody gets a reference to the given string and assigns it to the ConfigBody field.
func (o *FederationConfigObject) SetConfigBody(v string) {
	o.ConfigBody = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *FederationConfigObject) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationConfigObject) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *FederationConfigObject) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *FederationConfigObject) SetOphid(v string) {
	o.Ophid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FederationConfigObject) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationConfigObject) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FederationConfigObject) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *FederationConfigObject) SetVersion(v string) {
	o.Version = &v
}

func (o FederationConfigObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FederationConfigObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigBody) {
		toSerialize["configBody"] = o.ConfigBody
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FederationConfigObject) UnmarshalJSON(data []byte) (err error) {
	varFederationConfigObject := _FederationConfigObject{}

	err = json.Unmarshal(data, &varFederationConfigObject)

	if err != nil {
		return err
	}

	*o = FederationConfigObject(varFederationConfigObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configBody")
		delete(additionalProperties, "ophid")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFederationConfigObject struct {
	value *FederationConfigObject
	isSet bool
}

func (v NullableFederationConfigObject) Get() *FederationConfigObject {
	return v.value
}

func (v *NullableFederationConfigObject) Set(val *FederationConfigObject) {
	v.value = val
	v.isSet = true
}

func (v NullableFederationConfigObject) IsSet() bool {
	return v.isSet
}

func (v *NullableFederationConfigObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFederationConfigObject(val *FederationConfigObject) *NullableFederationConfigObject {
	return &NullableFederationConfigObject{value: val, isSet: true}
}

func (v NullableFederationConfigObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFederationConfigObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
