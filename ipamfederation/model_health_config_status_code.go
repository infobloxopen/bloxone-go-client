/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
	"fmt"
)

// HealthConfigStatusCode the model 'HealthConfigStatusCode'
type HealthConfigStatusCode string

// List of HealthConfigStatusCode
const (
	HEALTHCONFIGSTATUSCODE_SUCCESS            HealthConfigStatusCode = "StatusCode_SUCCESS"
	HEALTHCONFIGSTATUSCODE_GENERAL_FAILURE    HealthConfigStatusCode = "StatusCode_GENERAL_FAILURE"
	HEALTHCONFIGSTATUSCODE_HASH_FAILURE       HealthConfigStatusCode = "StatusCode_HASH_FAILURE"
	HEALTHCONFIGSTATUSCODE_VALIDATION_FAILURE HealthConfigStatusCode = "StatusCode_VALIDATION_FAILURE"
	HEALTHCONFIGSTATUSCODE_COPY_FAILURE       HealthConfigStatusCode = "StatusCode_COPY_FAILURE"
	HEALTHCONFIGSTATUSCODE_RELOAD_FAILIURE    HealthConfigStatusCode = "StatusCode_RELOAD_FAILIURE"
)

// All allowed values of HealthConfigStatusCode enum
var AllowedHealthConfigStatusCodeEnumValues = []HealthConfigStatusCode{
	"StatusCode_SUCCESS",
	"StatusCode_GENERAL_FAILURE",
	"StatusCode_HASH_FAILURE",
	"StatusCode_VALIDATION_FAILURE",
	"StatusCode_COPY_FAILURE",
	"StatusCode_RELOAD_FAILIURE",
}

func (v *HealthConfigStatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HealthConfigStatusCode(value)
	for _, existing := range AllowedHealthConfigStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HealthConfigStatusCode", value)
}

// NewHealthConfigStatusCodeFromValue returns a pointer to a valid HealthConfigStatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthConfigStatusCodeFromValue(v string) (*HealthConfigStatusCode, error) {
	ev := HealthConfigStatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HealthConfigStatusCode: valid values are %v", v, AllowedHealthConfigStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HealthConfigStatusCode) IsValid() bool {
	for _, existing := range AllowedHealthConfigStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HealthConfigStatusCode value
func (v HealthConfigStatusCode) Ptr() *HealthConfigStatusCode {
	return &v
}

type NullableHealthConfigStatusCode struct {
	value *HealthConfigStatusCode
	isSet bool
}

func (v NullableHealthConfigStatusCode) Get() *HealthConfigStatusCode {
	return v.value
}

func (v *NullableHealthConfigStatusCode) Set(val *HealthConfigStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthConfigStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthConfigStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthConfigStatusCode(val *HealthConfigStatusCode) *NullableHealthConfigStatusCode {
	return &NullableHealthConfigStatusCode{value: val, isSet: true}
}

func (v NullableHealthConfigStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthConfigStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
