/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the FederationCreateNextAvailableFederatedBlockResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FederationCreateNextAvailableFederatedBlockResponse{}

// FederationCreateNextAvailableFederatedBlockResponse The response format to allocate next available __FederatedBlock__ objects.
type FederationCreateNextAvailableFederatedBlockResponse struct {
	Results              []FederationFederatedBlock `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FederationCreateNextAvailableFederatedBlockResponse FederationCreateNextAvailableFederatedBlockResponse

// NewFederationCreateNextAvailableFederatedBlockResponse instantiates a new FederationCreateNextAvailableFederatedBlockResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFederationCreateNextAvailableFederatedBlockResponse() *FederationCreateNextAvailableFederatedBlockResponse {
	this := FederationCreateNextAvailableFederatedBlockResponse{}
	return &this
}

// NewFederationCreateNextAvailableFederatedBlockResponseWithDefaults instantiates a new FederationCreateNextAvailableFederatedBlockResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFederationCreateNextAvailableFederatedBlockResponseWithDefaults() *FederationCreateNextAvailableFederatedBlockResponse {
	this := FederationCreateNextAvailableFederatedBlockResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *FederationCreateNextAvailableFederatedBlockResponse) GetResults() []FederationFederatedBlock {
	if o == nil || IsNil(o.Results) {
		var ret []FederationFederatedBlock
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationCreateNextAvailableFederatedBlockResponse) GetResultsOk() ([]FederationFederatedBlock, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *FederationCreateNextAvailableFederatedBlockResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []FederationFederatedBlock and assigns it to the Results field.
func (o *FederationCreateNextAvailableFederatedBlockResponse) SetResults(v []FederationFederatedBlock) {
	o.Results = v
}

func (o FederationCreateNextAvailableFederatedBlockResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FederationCreateNextAvailableFederatedBlockResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FederationCreateNextAvailableFederatedBlockResponse) UnmarshalJSON(data []byte) (err error) {
	varFederationCreateNextAvailableFederatedBlockResponse := _FederationCreateNextAvailableFederatedBlockResponse{}

	err = json.Unmarshal(data, &varFederationCreateNextAvailableFederatedBlockResponse)

	if err != nil {
		return err
	}

	*o = FederationCreateNextAvailableFederatedBlockResponse(varFederationCreateNextAvailableFederatedBlockResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFederationCreateNextAvailableFederatedBlockResponse struct {
	value *FederationCreateNextAvailableFederatedBlockResponse
	isSet bool
}

func (v NullableFederationCreateNextAvailableFederatedBlockResponse) Get() *FederationCreateNextAvailableFederatedBlockResponse {
	return v.value
}

func (v *NullableFederationCreateNextAvailableFederatedBlockResponse) Set(val *FederationCreateNextAvailableFederatedBlockResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFederationCreateNextAvailableFederatedBlockResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFederationCreateNextAvailableFederatedBlockResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFederationCreateNextAvailableFederatedBlockResponse(val *FederationCreateNextAvailableFederatedBlockResponse) *NullableFederationCreateNextAvailableFederatedBlockResponse {
	return &NullableFederationCreateNextAvailableFederatedBlockResponse{value: val, isSet: true}
}

func (v NullableFederationCreateNextAvailableFederatedBlockResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFederationCreateNextAvailableFederatedBlockResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
