/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the ConfigObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigObject{}

// ConfigObject struct for ConfigObject
type ConfigObject struct {
	ConfigBody           *string `json:"configBody,omitempty"`
	Ophid                *string `json:"ophid,omitempty"`
	Version              *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfigObject ConfigObject

// NewConfigObject instantiates a new ConfigObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigObject() *ConfigObject {
	this := ConfigObject{}
	return &this
}

// NewConfigObjectWithDefaults instantiates a new ConfigObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigObjectWithDefaults() *ConfigObject {
	this := ConfigObject{}
	return &this
}

// GetConfigBody returns the ConfigBody field value if set, zero value otherwise.
func (o *ConfigObject) GetConfigBody() string {
	if o == nil || IsNil(o.ConfigBody) {
		var ret string
		return ret
	}
	return *o.ConfigBody
}

// GetConfigBodyOk returns a tuple with the ConfigBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigObject) GetConfigBodyOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigBody) {
		return nil, false
	}
	return o.ConfigBody, true
}

// HasConfigBody returns a boolean if a field has been set.
func (o *ConfigObject) HasConfigBody() bool {
	if o != nil && !IsNil(o.ConfigBody) {
		return true
	}

	return false
}

// SetConfigBody gets a reference to the given string and assigns it to the ConfigBody field.
func (o *ConfigObject) SetConfigBody(v string) {
	o.ConfigBody = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *ConfigObject) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigObject) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *ConfigObject) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *ConfigObject) SetOphid(v string) {
	o.Ophid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConfigObject) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigObject) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConfigObject) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConfigObject) SetVersion(v string) {
	o.Version = &v
}

func (o ConfigObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigBody) {
		toSerialize["configBody"] = o.ConfigBody
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigObject) UnmarshalJSON(data []byte) (err error) {
	varConfigObject := _ConfigObject{}

	err = json.Unmarshal(data, &varConfigObject)

	if err != nil {
		return err
	}

	*o = ConfigObject(varConfigObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configBody")
		delete(additionalProperties, "ophid")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfigObject struct {
	value *ConfigObject
	isSet bool
}

func (v NullableConfigObject) Get() *ConfigObject {
	return v.value
}

func (v *NullableConfigObject) Set(val *ConfigObject) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigObject) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigObject(val *ConfigObject) *NullableConfigObject {
	return &NullableConfigObject{value: val, isSet: true}
}

func (v NullableConfigObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
