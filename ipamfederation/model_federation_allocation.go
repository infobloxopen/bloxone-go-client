/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the FederationAllocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FederationAllocation{}

// FederationAllocation The __Allocation__ tracks the distribution of Federated Blocks within each of the supported objects.
type FederationAllocation struct {
	// Percent of total space allocated.
	Allocated *int64 `json:"allocated,omitempty"`
	// Percent of total space delegated.
	Delegated *int64 `json:"delegated,omitempty"`
	// Percent of total space in overlapping blocks.
	Overlapping *int64 `json:"overlapping,omitempty"`
	// Percent of total space reserved.
	Reserved             *int64 `json:"reserved,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FederationAllocation FederationAllocation

// NewFederationAllocation instantiates a new FederationAllocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFederationAllocation() *FederationAllocation {
	this := FederationAllocation{}
	return &this
}

// NewFederationAllocationWithDefaults instantiates a new FederationAllocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFederationAllocationWithDefaults() *FederationAllocation {
	this := FederationAllocation{}
	return &this
}

// GetAllocated returns the Allocated field value if set, zero value otherwise.
func (o *FederationAllocation) GetAllocated() int64 {
	if o == nil || IsNil(o.Allocated) {
		var ret int64
		return ret
	}
	return *o.Allocated
}

// GetAllocatedOk returns a tuple with the Allocated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationAllocation) GetAllocatedOk() (*int64, bool) {
	if o == nil || IsNil(o.Allocated) {
		return nil, false
	}
	return o.Allocated, true
}

// HasAllocated returns a boolean if a field has been set.
func (o *FederationAllocation) HasAllocated() bool {
	if o != nil && !IsNil(o.Allocated) {
		return true
	}

	return false
}

// SetAllocated gets a reference to the given int64 and assigns it to the Allocated field.
func (o *FederationAllocation) SetAllocated(v int64) {
	o.Allocated = &v
}

// GetDelegated returns the Delegated field value if set, zero value otherwise.
func (o *FederationAllocation) GetDelegated() int64 {
	if o == nil || IsNil(o.Delegated) {
		var ret int64
		return ret
	}
	return *o.Delegated
}

// GetDelegatedOk returns a tuple with the Delegated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationAllocation) GetDelegatedOk() (*int64, bool) {
	if o == nil || IsNil(o.Delegated) {
		return nil, false
	}
	return o.Delegated, true
}

// HasDelegated returns a boolean if a field has been set.
func (o *FederationAllocation) HasDelegated() bool {
	if o != nil && !IsNil(o.Delegated) {
		return true
	}

	return false
}

// SetDelegated gets a reference to the given int64 and assigns it to the Delegated field.
func (o *FederationAllocation) SetDelegated(v int64) {
	o.Delegated = &v
}

// GetOverlapping returns the Overlapping field value if set, zero value otherwise.
func (o *FederationAllocation) GetOverlapping() int64 {
	if o == nil || IsNil(o.Overlapping) {
		var ret int64
		return ret
	}
	return *o.Overlapping
}

// GetOverlappingOk returns a tuple with the Overlapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationAllocation) GetOverlappingOk() (*int64, bool) {
	if o == nil || IsNil(o.Overlapping) {
		return nil, false
	}
	return o.Overlapping, true
}

// HasOverlapping returns a boolean if a field has been set.
func (o *FederationAllocation) HasOverlapping() bool {
	if o != nil && !IsNil(o.Overlapping) {
		return true
	}

	return false
}

// SetOverlapping gets a reference to the given int64 and assigns it to the Overlapping field.
func (o *FederationAllocation) SetOverlapping(v int64) {
	o.Overlapping = &v
}

// GetReserved returns the Reserved field value if set, zero value otherwise.
func (o *FederationAllocation) GetReserved() int64 {
	if o == nil || IsNil(o.Reserved) {
		var ret int64
		return ret
	}
	return *o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationAllocation) GetReservedOk() (*int64, bool) {
	if o == nil || IsNil(o.Reserved) {
		return nil, false
	}
	return o.Reserved, true
}

// HasReserved returns a boolean if a field has been set.
func (o *FederationAllocation) HasReserved() bool {
	if o != nil && !IsNil(o.Reserved) {
		return true
	}

	return false
}

// SetReserved gets a reference to the given int64 and assigns it to the Reserved field.
func (o *FederationAllocation) SetReserved(v int64) {
	o.Reserved = &v
}

func (o FederationAllocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FederationAllocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allocated) {
		toSerialize["allocated"] = o.Allocated
	}
	if !IsNil(o.Delegated) {
		toSerialize["delegated"] = o.Delegated
	}
	if !IsNil(o.Overlapping) {
		toSerialize["overlapping"] = o.Overlapping
	}
	if !IsNil(o.Reserved) {
		toSerialize["reserved"] = o.Reserved
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FederationAllocation) UnmarshalJSON(data []byte) (err error) {
	varFederationAllocation := _FederationAllocation{}

	err = json.Unmarshal(data, &varFederationAllocation)

	if err != nil {
		return err
	}

	*o = FederationAllocation(varFederationAllocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allocated")
		delete(additionalProperties, "delegated")
		delete(additionalProperties, "overlapping")
		delete(additionalProperties, "reserved")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFederationAllocation struct {
	value *FederationAllocation
	isSet bool
}

func (v NullableFederationAllocation) Get() *FederationAllocation {
	return v.value
}

func (v *NullableFederationAllocation) Set(val *FederationAllocation) {
	v.value = val
	v.isSet = true
}

func (v NullableFederationAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableFederationAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFederationAllocation(val *FederationAllocation) *NullableFederationAllocation {
	return &NullableFederationAllocation{value: val, isSet: true}
}

func (v NullableFederationAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFederationAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
