/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the FederationDelegationBulkResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FederationDelegationBulkResponse{}

// FederationDelegationBulkResponse The DelegationBulk response object.
type FederationDelegationBulkResponse struct {
	// A list of Delegation objects.
	Results              []FederationDelegation `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FederationDelegationBulkResponse FederationDelegationBulkResponse

// NewFederationDelegationBulkResponse instantiates a new FederationDelegationBulkResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFederationDelegationBulkResponse() *FederationDelegationBulkResponse {
	this := FederationDelegationBulkResponse{}
	return &this
}

// NewFederationDelegationBulkResponseWithDefaults instantiates a new FederationDelegationBulkResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFederationDelegationBulkResponseWithDefaults() *FederationDelegationBulkResponse {
	this := FederationDelegationBulkResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *FederationDelegationBulkResponse) GetResults() []FederationDelegation {
	if o == nil || IsNil(o.Results) {
		var ret []FederationDelegation
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationDelegationBulkResponse) GetResultsOk() ([]FederationDelegation, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *FederationDelegationBulkResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []FederationDelegation and assigns it to the Results field.
func (o *FederationDelegationBulkResponse) SetResults(v []FederationDelegation) {
	o.Results = v
}

func (o FederationDelegationBulkResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FederationDelegationBulkResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FederationDelegationBulkResponse) UnmarshalJSON(data []byte) (err error) {
	varFederationDelegationBulkResponse := _FederationDelegationBulkResponse{}

	err = json.Unmarshal(data, &varFederationDelegationBulkResponse)

	if err != nil {
		return err
	}

	*o = FederationDelegationBulkResponse(varFederationDelegationBulkResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFederationDelegationBulkResponse struct {
	value *FederationDelegationBulkResponse
	isSet bool
}

func (v NullableFederationDelegationBulkResponse) Get() *FederationDelegationBulkResponse {
	return v.value
}

func (v *NullableFederationDelegationBulkResponse) Set(val *FederationDelegationBulkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFederationDelegationBulkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFederationDelegationBulkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFederationDelegationBulkResponse(val *FederationDelegationBulkResponse) *NullableFederationDelegationBulkResponse {
	return &NullableFederationDelegationBulkResponse{value: val, isSet: true}
}

func (v NullableFederationDelegationBulkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFederationDelegationBulkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
