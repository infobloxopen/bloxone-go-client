/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the DelegationBulkItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelegationBulkItem{}

// DelegationBulkItem DelegationBulkItem object.
type DelegationBulkItem struct {
	// Type of action to execute on Delegation object.  Valid values are: * _POST_ * _PATCH_ * _DELETE_
	Action *string `json:"action,omitempty"`
	// The Delegation object to execute the action on.
	Delegation           *Delegation `json:"delegation,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DelegationBulkItem DelegationBulkItem

// NewDelegationBulkItem instantiates a new DelegationBulkItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegationBulkItem() *DelegationBulkItem {
	this := DelegationBulkItem{}
	return &this
}

// NewDelegationBulkItemWithDefaults instantiates a new DelegationBulkItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegationBulkItemWithDefaults() *DelegationBulkItem {
	this := DelegationBulkItem{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *DelegationBulkItem) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationBulkItem) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *DelegationBulkItem) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *DelegationBulkItem) SetAction(v string) {
	o.Action = &v
}

// GetDelegation returns the Delegation field value if set, zero value otherwise.
func (o *DelegationBulkItem) GetDelegation() Delegation {
	if o == nil || IsNil(o.Delegation) {
		var ret Delegation
		return ret
	}
	return *o.Delegation
}

// GetDelegationOk returns a tuple with the Delegation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationBulkItem) GetDelegationOk() (*Delegation, bool) {
	if o == nil || IsNil(o.Delegation) {
		return nil, false
	}
	return o.Delegation, true
}

// HasDelegation returns a boolean if a field has been set.
func (o *DelegationBulkItem) HasDelegation() bool {
	if o != nil && !IsNil(o.Delegation) {
		return true
	}

	return false
}

// SetDelegation gets a reference to the given Delegation and assigns it to the Delegation field.
func (o *DelegationBulkItem) SetDelegation(v Delegation) {
	o.Delegation = &v
}

func (o DelegationBulkItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelegationBulkItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Delegation) {
		toSerialize["delegation"] = o.Delegation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DelegationBulkItem) UnmarshalJSON(data []byte) (err error) {
	varDelegationBulkItem := _DelegationBulkItem{}

	err = json.Unmarshal(data, &varDelegationBulkItem)

	if err != nil {
		return err
	}

	*o = DelegationBulkItem(varDelegationBulkItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "delegation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDelegationBulkItem struct {
	value *DelegationBulkItem
	isSet bool
}

func (v NullableDelegationBulkItem) Get() *DelegationBulkItem {
	return v.value
}

func (v *NullableDelegationBulkItem) Set(val *DelegationBulkItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegationBulkItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegationBulkItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegationBulkItem(val *DelegationBulkItem) *NullableDelegationBulkItem {
	return &NullableDelegationBulkItem{value: val, isSet: true}
}

func (v NullableDelegationBulkItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegationBulkItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
