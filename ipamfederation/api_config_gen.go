/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/bloxone-go-client/internal"
)

type ConfigGenAPI interface {
	/*
		Fetch Method for Fetch

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ophid
		@return ConfigGenAPIFetchRequest
	*/
	Fetch(ctx context.Context, ophid string) ConfigGenAPIFetchRequest

	// FetchExecute executes the request
	//  @return FederationGenerateConfigBundleResponse
	FetchExecute(r ConfigGenAPIFetchRequest) (*FederationGenerateConfigBundleResponse, *http.Response, error)
	/*
		UpdateConfigStatus Method for UpdateConfigStatus

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConfigGenAPIUpdateConfigStatusRequest
	*/
	UpdateConfigStatus(ctx context.Context) ConfigGenAPIUpdateConfigStatusRequest

	// UpdateConfigStatusExecute executes the request
	//  @return FederationHealthCheckConfigResponse
	UpdateConfigStatusExecute(r ConfigGenAPIUpdateConfigStatusRequest) (*FederationHealthCheckConfigResponse, *http.Response, error)
}

// ConfigGenAPIService ConfigGenAPI service
type ConfigGenAPIService internal.Service

type ConfigGenAPIFetchRequest struct {
	ctx        context.Context
	ApiService ConfigGenAPI
	ophid      string
}

func (r ConfigGenAPIFetchRequest) Execute() (*FederationGenerateConfigBundleResponse, *http.Response, error) {
	return r.ApiService.FetchExecute(r)
}

/*
Fetch Method for Fetch

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ophid
	@return ConfigGenAPIFetchRequest
*/
func (a *ConfigGenAPIService) Fetch(ctx context.Context, ophid string) ConfigGenAPIFetchRequest {
	return ConfigGenAPIFetchRequest{
		ApiService: a,
		ctx:        ctx,
		ophid:      ophid,
	}
}

// Execute executes the request
//
//	@return FederationGenerateConfigBundleResponse
func (a *ConfigGenAPIService) FetchExecute(r ConfigGenAPIFetchRequest) (*FederationGenerateConfigBundleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *FederationGenerateConfigBundleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigGenAPIService.Fetch")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/federation/policy/config/{ophid}/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"ophid"+"}", url.PathEscape(internal.ParameterValueToString(r.ophid, "ophid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigGenAPIUpdateConfigStatusRequest struct {
	ctx        context.Context
	ApiService ConfigGenAPI
	body       *FederationHealthConfig
}

func (r ConfigGenAPIUpdateConfigStatusRequest) Body(body FederationHealthConfig) ConfigGenAPIUpdateConfigStatusRequest {
	r.body = &body
	return r
}

func (r ConfigGenAPIUpdateConfigStatusRequest) Execute() (*FederationHealthCheckConfigResponse, *http.Response, error) {
	return r.ApiService.UpdateConfigStatusExecute(r)
}

/*
UpdateConfigStatus Method for UpdateConfigStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConfigGenAPIUpdateConfigStatusRequest
*/
func (a *ConfigGenAPIService) UpdateConfigStatus(ctx context.Context) ConfigGenAPIUpdateConfigStatusRequest {
	return ConfigGenAPIUpdateConfigStatusRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FederationHealthCheckConfigResponse
func (a *ConfigGenAPIService) UpdateConfigStatusExecute(r ConfigGenAPIUpdateConfigStatusRequest) (*FederationHealthCheckConfigResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *FederationHealthCheckConfigResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigGenAPIService.UpdateConfigStatus")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/federation/policy/config_status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
