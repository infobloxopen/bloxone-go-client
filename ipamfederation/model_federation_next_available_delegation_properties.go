/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the FederationNextAvailableDelegationProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FederationNextAvailableDelegationProperties{}

// FederationNextAvailableDelegationProperties struct for FederationNextAvailableDelegationProperties
type FederationNextAvailableDelegationProperties struct {
	// The description for the __Delegation__. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// The specific IPAM service the __Delegation__ was delegated to.
	DelegatedTo *string `json:"delegated_to,omitempty"`
	// The name to be provided.
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FederationNextAvailableDelegationProperties FederationNextAvailableDelegationProperties

// NewFederationNextAvailableDelegationProperties instantiates a new FederationNextAvailableDelegationProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFederationNextAvailableDelegationProperties() *FederationNextAvailableDelegationProperties {
	this := FederationNextAvailableDelegationProperties{}
	return &this
}

// NewFederationNextAvailableDelegationPropertiesWithDefaults instantiates a new FederationNextAvailableDelegationProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFederationNextAvailableDelegationPropertiesWithDefaults() *FederationNextAvailableDelegationProperties {
	this := FederationNextAvailableDelegationProperties{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *FederationNextAvailableDelegationProperties) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationNextAvailableDelegationProperties) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *FederationNextAvailableDelegationProperties) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *FederationNextAvailableDelegationProperties) SetComment(v string) {
	o.Comment = &v
}

// GetDelegatedTo returns the DelegatedTo field value if set, zero value otherwise.
func (o *FederationNextAvailableDelegationProperties) GetDelegatedTo() string {
	if o == nil || IsNil(o.DelegatedTo) {
		var ret string
		return ret
	}
	return *o.DelegatedTo
}

// GetDelegatedToOk returns a tuple with the DelegatedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationNextAvailableDelegationProperties) GetDelegatedToOk() (*string, bool) {
	if o == nil || IsNil(o.DelegatedTo) {
		return nil, false
	}
	return o.DelegatedTo, true
}

// HasDelegatedTo returns a boolean if a field has been set.
func (o *FederationNextAvailableDelegationProperties) HasDelegatedTo() bool {
	if o != nil && !IsNil(o.DelegatedTo) {
		return true
	}

	return false
}

// SetDelegatedTo gets a reference to the given string and assigns it to the DelegatedTo field.
func (o *FederationNextAvailableDelegationProperties) SetDelegatedTo(v string) {
	o.DelegatedTo = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FederationNextAvailableDelegationProperties) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FederationNextAvailableDelegationProperties) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FederationNextAvailableDelegationProperties) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FederationNextAvailableDelegationProperties) SetName(v string) {
	o.Name = &v
}

func (o FederationNextAvailableDelegationProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FederationNextAvailableDelegationProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DelegatedTo) {
		toSerialize["delegated_to"] = o.DelegatedTo
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FederationNextAvailableDelegationProperties) UnmarshalJSON(data []byte) (err error) {
	varFederationNextAvailableDelegationProperties := _FederationNextAvailableDelegationProperties{}

	err = json.Unmarshal(data, &varFederationNextAvailableDelegationProperties)

	if err != nil {
		return err
	}

	*o = FederationNextAvailableDelegationProperties(varFederationNextAvailableDelegationProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "delegated_to")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFederationNextAvailableDelegationProperties struct {
	value *FederationNextAvailableDelegationProperties
	isSet bool
}

func (v NullableFederationNextAvailableDelegationProperties) Get() *FederationNextAvailableDelegationProperties {
	return v.value
}

func (v *NullableFederationNextAvailableDelegationProperties) Set(val *FederationNextAvailableDelegationProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableFederationNextAvailableDelegationProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableFederationNextAvailableDelegationProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFederationNextAvailableDelegationProperties(val *FederationNextAvailableDelegationProperties) *NullableFederationNextAvailableDelegationProperties {
	return &NullableFederationNextAvailableDelegationProperties{value: val, isSet: true}
}

func (v NullableFederationNextAvailableDelegationProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFederationNextAvailableDelegationProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
