/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the NextAvailableDelegationArguments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NextAvailableDelegationArguments{}

// NextAvailableDelegationArguments struct for NextAvailableDelegationArguments
type NextAvailableDelegationArguments struct {
	// The CIDR of the delegation to be created. This is required, if _address_ does not specify it in its input.
	Cidr *int64 `json:"cidr,omitempty"`
	// The count of __Delegation__ required. If not provided, it will default to 1.
	Count *int64 `json:"count,omitempty"`
	// The resource identifier.
	FederatedRealms []string `json:"federated_realms,omitempty"`
	// It  contains the map of attributes and the associated value.
	Predicates map[string]interface{} `json:"predicates,omitempty"`
	// The field which denotes if the __Delegation__ will be provisioned or just calculated and returned.
	ReadOnly             *bool `json:"read_only,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NextAvailableDelegationArguments NextAvailableDelegationArguments

// NewNextAvailableDelegationArguments instantiates a new NextAvailableDelegationArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextAvailableDelegationArguments() *NextAvailableDelegationArguments {
	this := NextAvailableDelegationArguments{}
	return &this
}

// NewNextAvailableDelegationArgumentsWithDefaults instantiates a new NextAvailableDelegationArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextAvailableDelegationArgumentsWithDefaults() *NextAvailableDelegationArguments {
	this := NextAvailableDelegationArguments{}
	return &this
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *NextAvailableDelegationArguments) GetCidr() int64 {
	if o == nil || IsNil(o.Cidr) {
		var ret int64
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableDelegationArguments) GetCidrOk() (*int64, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *NextAvailableDelegationArguments) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given int64 and assigns it to the Cidr field.
func (o *NextAvailableDelegationArguments) SetCidr(v int64) {
	o.Cidr = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *NextAvailableDelegationArguments) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableDelegationArguments) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *NextAvailableDelegationArguments) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *NextAvailableDelegationArguments) SetCount(v int64) {
	o.Count = &v
}

// GetFederatedRealms returns the FederatedRealms field value if set, zero value otherwise.
func (o *NextAvailableDelegationArguments) GetFederatedRealms() []string {
	if o == nil || IsNil(o.FederatedRealms) {
		var ret []string
		return ret
	}
	return o.FederatedRealms
}

// GetFederatedRealmsOk returns a tuple with the FederatedRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableDelegationArguments) GetFederatedRealmsOk() ([]string, bool) {
	if o == nil || IsNil(o.FederatedRealms) {
		return nil, false
	}
	return o.FederatedRealms, true
}

// HasFederatedRealms returns a boolean if a field has been set.
func (o *NextAvailableDelegationArguments) HasFederatedRealms() bool {
	if o != nil && !IsNil(o.FederatedRealms) {
		return true
	}

	return false
}

// SetFederatedRealms gets a reference to the given []string and assigns it to the FederatedRealms field.
func (o *NextAvailableDelegationArguments) SetFederatedRealms(v []string) {
	o.FederatedRealms = v
}

// GetPredicates returns the Predicates field value if set, zero value otherwise.
func (o *NextAvailableDelegationArguments) GetPredicates() map[string]interface{} {
	if o == nil || IsNil(o.Predicates) {
		var ret map[string]interface{}
		return ret
	}
	return o.Predicates
}

// GetPredicatesOk returns a tuple with the Predicates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableDelegationArguments) GetPredicatesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Predicates) {
		return map[string]interface{}{}, false
	}
	return o.Predicates, true
}

// HasPredicates returns a boolean if a field has been set.
func (o *NextAvailableDelegationArguments) HasPredicates() bool {
	if o != nil && !IsNil(o.Predicates) {
		return true
	}

	return false
}

// SetPredicates gets a reference to the given map[string]interface{} and assigns it to the Predicates field.
func (o *NextAvailableDelegationArguments) SetPredicates(v map[string]interface{}) {
	o.Predicates = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *NextAvailableDelegationArguments) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableDelegationArguments) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *NextAvailableDelegationArguments) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *NextAvailableDelegationArguments) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o NextAvailableDelegationArguments) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NextAvailableDelegationArguments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.FederatedRealms) {
		toSerialize["federated_realms"] = o.FederatedRealms
	}
	if !IsNil(o.Predicates) {
		toSerialize["predicates"] = o.Predicates
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["read_only"] = o.ReadOnly
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NextAvailableDelegationArguments) UnmarshalJSON(data []byte) (err error) {
	varNextAvailableDelegationArguments := _NextAvailableDelegationArguments{}

	err = json.Unmarshal(data, &varNextAvailableDelegationArguments)

	if err != nil {
		return err
	}

	*o = NextAvailableDelegationArguments(varNextAvailableDelegationArguments)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "count")
		delete(additionalProperties, "federated_realms")
		delete(additionalProperties, "predicates")
		delete(additionalProperties, "read_only")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNextAvailableDelegationArguments struct {
	value *NextAvailableDelegationArguments
	isSet bool
}

func (v NullableNextAvailableDelegationArguments) Get() *NextAvailableDelegationArguments {
	return v.value
}

func (v *NullableNextAvailableDelegationArguments) Set(val *NextAvailableDelegationArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableNextAvailableDelegationArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableNextAvailableDelegationArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextAvailableDelegationArguments(val *NextAvailableDelegationArguments) *NullableNextAvailableDelegationArguments {
	return &NullableNextAvailableDelegationArguments{value: val, isSet: true}
}

func (v NullableNextAvailableDelegationArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextAvailableDelegationArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
