openapi: 3.0.1
info:
  description: "The DNS Data is a BloxOne DDI service providing primary authoritative\
    \ zone support. DNS Data is authoritative for all DNS resource records and is\
    \ acting as a primary DNS server. It is part of the full-featured, DDI cloud solution\
    \ that enables customers to deploy large numbers of protocol servers to deliver\
    \ DNS and DHCP throughout their enterprise network. \n\n"
  title: DNS Data API
  version: v1
servers:
- url: http://csp.infoblox.com/api/ddi/v1/
- url: https://csp.infoblox.com/api/ddi/v1/
security:
- ApiKeyAuth: []
paths:
  /dns/record:
    get:
      description: |-
        Use this method to retrieve DNS __Record__ objects.
        A __Record__ object represents a DNS resource record in an authoritative zone.
      operationId: recordList
      parameters:
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nA collection of response resources can be filtered by a\
          \ logical expression string that includes JSON tag references to values\
          \ in each resource, literal values, and logical operators. If a resource\
          \ does not have the specified tag, its value is assumed to be null.\n\n\
          Literal values include numbers (integer and floating-point), and quoted\
          \ (both single- or double-quoted) literal strings, and 'null'. The following\
          \ operators are commonly used in filter expressions:\n\n|  Op   |  Description\
          \               | \n|  --   |  -----------               | \n|  ==   | \
          \ Equal                     | \n|  !=   |  Not Equal                 | \n\
          |  >    |  Greater Than              | \n|   >=  |  Greater Than or Equal\
          \ To  | \n|  <    |  Less Than                 | \n|  <=   |  Less Than\
          \ or Equal To     | \n|  and  |  Logical AND               | \n|  ~    |\
          \  Matches Regex             | \n|  !~   |  Does Not Match Regex      |\
          \ \n|  or   |  Logical OR                | \n|  not  |  Logical NOT    \
          \           | \n|  ()   |  Groupping Operators       |\n\n\t\t\t\t\t\t"
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: "\n\nA collection of response resources can be sorted by their\
          \ JSON tags. For a 'flat' resource, the tag name is straightforward. If\
          \ sorting is allowed on non-flat hierarchical resources, the service should\
          \ implement a qualified naming scheme such as dot-qualification to reference\
          \ data down the hierarchy. If a resource does not have the specified tag,\
          \ its value is assumed to be null.)\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names. The sort direction can be specified by a suffix\
          \ separated by whitespace before the tag name. The suffix 'asc' sorts the\
          \ data in ascending order. The suffix 'desc' sorts the data in descending\
          \ order. If no suffix is specified the data is sorted in ascending order.\n\
          \n\t\t\t\t\t\t"
        in: query
        name: _order_by
        schema:
          type: string
      - description: This parameter is used for filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: This parameter is used for sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      - description: This parameter is used for getting inheritance_sources.
        in: query
        name: _inherit
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataListRecordResponse'
          description: GET operation response
      summary: Retrieve DNS resource records.
      tags:
      - record
    post:
      description: |-
        Use this method to create a DNS __Record__ object.
        A __Record__ object represents a DNS resource record in an authoritative zone.
      operationId: recordCreate
      parameters:
      - description: This parameter is used for getting inheritance_sources.
        in: query
        name: _inherit
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataRecord'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataCreateRecordResponse'
          description: POST operation response
      summary: Create the DNS resource record.
      tags:
      - record
      x-tf-resource: dns_record
      x-tf-datasource: dns_records
      x-sdk-default-tags: true
      x-codegen-request-body-name: body
  /dns/record/{id}:
    delete:
      description: |-
        Use this method to move a DNS __Record__ object to the recycle bin.
        A __Record__ object represents a DNS resource record in an authoritative zone.
      operationId: recordDelete
      parameters:
      - description: An application specific resource identity of a resource
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
      summary: Move the DNS resource record to recycle bin.
      tags:
      - record
    get:
      description: |-
        Use this method to retrieve a DNS __Record__ object.
        A __Record__ object represents a DNS resource record in an authoritative zone.
      operationId: recordRead
      parameters:
      - description: An application specific resource identity of a resource
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: This parameter is used for getting inheritance_sources.
        in: query
        name: _inherit
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataReadRecordResponse'
          description: GET operation response
      summary: Retrieve the DNS resource record.
      tags:
      - record
    patch:
      description: |-
        Use this method to update a DNS __Record__ object.
        A __Record__ object represents a DNS resource record in an authoritative zone.
      operationId: recordUpdate
      parameters:
      - description: An application specific resource identity of a resource
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: This parameter is used for getting inheritance_sources.
        in: query
        name: _inherit
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataRecord'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataUpdateRecordResponse'
          description: PATCH operation response
      summary: Update the DNS resource record.
      tags:
      - record
      x-sdk-default-tags: true
      x-codegen-request-body-name: body
  /dns/record/{id}/serial_increment:
    post:
      description: |-
        Use this method to increment the serial number for an SOA (Start of Authority) _Record_ object.
        A __Record__ object represents a DNS resource record in an authoritative zone.
      operationId: recordSOASerialIncrement
      parameters:
      - description: An application specific resource identity of a resource
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataSOASerialIncrementRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataSOASerialIncrementResponse'
          description: POST operation response
      summary: Increment serial number for the SOA record.
      tags:
      - record
      x-codegen-request-body-name: body
components:
  schemas:
    dataCreateRecordResponse:
      description: The response format to create the __Record__ object.
      example:
        result:
          dns_name_in_zone: dns_name_in_zone
          absolute_name_spec: absolute_name_spec
          created_at: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          type: type
          view: view
          updated_at: 2000-01-23T04:56:07.000+00:00
          subtype: subtype
          zone: zone
          options: "{}"
          disabled: true
          id: id
          view_name: view_name
          ipam_host: ipam_host
          rdata:
            address: 10.0.0.0
          ttl: 6
          dns_absolute_name_spec: dns_absolute_name_spec
          absolute_zone_name: absolute_zone_name
          tags: "{}"
          inheritance_sources:
            ttl:
              action: action
              source: source
              display_name: display_name
              value: 0
          dns_absolute_zone_name: dns_absolute_zone_name
          comment: comment
          name_in_zone: name_in_zone
          provider_metadata: "{}"
          delegation: delegation
          dns_rdata: dns_rdata
      properties:
        result:
          $ref: '#/components/schemas/dataRecord'
      title: CreateRecordResponse
      type: object
    dataListRecordResponse:
      description: The response format to retrieve __Record__ objects.
      example:
        results:
        - dns_name_in_zone: dns_name_in_zone
          absolute_name_spec: absolute_name_spec
          created_at: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          type: type
          view: view
          updated_at: 2000-01-23T04:56:07.000+00:00
          subtype: subtype
          zone: zone
          options: "{}"
          disabled: true
          id: id
          view_name: view_name
          ipam_host: ipam_host
          rdata:
            address: 10.0.0.0
          ttl: 6
          dns_absolute_name_spec: dns_absolute_name_spec
          absolute_zone_name: absolute_zone_name
          tags: "{}"
          inheritance_sources:
            ttl:
              action: action
              source: source
              display_name: display_name
              value: 0
          dns_absolute_zone_name: dns_absolute_zone_name
          comment: comment
          name_in_zone: name_in_zone
          provider_metadata: "{}"
          delegation: delegation
          dns_rdata: dns_rdata
        - dns_name_in_zone: dns_name_in_zone
          absolute_name_spec: absolute_name_spec
          created_at: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          type: type
          view: view
          updated_at: 2000-01-23T04:56:07.000+00:00
          subtype: subtype
          zone: zone
          options: "{}"
          disabled: true
          id: id
          view_name: view_name
          ipam_host: ipam_host
          rdata:
            address: 10.0.0.0
          ttl: 6
          dns_absolute_name_spec: dns_absolute_name_spec
          absolute_zone_name: absolute_zone_name
          tags: "{}"
          inheritance_sources:
            ttl:
              action: action
              source: source
              display_name: display_name
              value: 0
          dns_absolute_zone_name: dns_absolute_zone_name
          comment: comment
          name_in_zone: name_in_zone
          provider_metadata: "{}"
          delegation: delegation
          dns_rdata: dns_rdata
      properties:
        results:
          description: The list of Record objects.
          items:
            $ref: '#/components/schemas/dataRecord'
          type: array
      title: ListRecordResponse
      type: object
    dataReadRecordResponse:
      description: The response format to retrieve the __Record__ object.
      example:
        result:
          dns_name_in_zone: dns_name_in_zone
          absolute_name_spec: absolute_name_spec
          created_at: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          type: type
          view: view
          updated_at: 2000-01-23T04:56:07.000+00:00
          subtype: subtype
          zone: zone
          options: "{}"
          disabled: true
          id: id
          view_name: view_name
          ipam_host: ipam_host
          rdata:
            address: 10.0.0.0
          ttl: 6
          dns_absolute_name_spec: dns_absolute_name_spec
          absolute_zone_name: absolute_zone_name
          tags: "{}"
          inheritance_sources:
            ttl:
              action: action
              source: source
              display_name: display_name
              value: 0
          dns_absolute_zone_name: dns_absolute_zone_name
          comment: comment
          name_in_zone: name_in_zone
          provider_metadata: "{}"
          delegation: delegation
          dns_rdata: dns_rdata
      properties:
        result:
          $ref: '#/components/schemas/dataRecord'
      title: ReadRecordResponse
      type: object
    dataRecord:
      description: |-
        A __Record__ object (_dns/record_) represents a DNS resource record in an authoritative zone.

        For creating a DNS resource record, one of the following pairs of fields is required:<ul><li>_name_in_zone_ and _zone_: The system creates the DNS resource record object within the specified zone. The value of the view field is automatically retrieved from the zone object.</li><li>_absolute_name_spec_ and _view_: The system looks for the appropriate zone in the provided view to create the DNS resource record object. The value of the zone field is automatically computed as part of this process.</li></ul>

        The _zone_ and _view_ fields cannot be modified while updating a DNS resource record. The _name_in_zone_ and _absolute_name_spec_ fields can be modified. If both fields are modified in the same update, they need to represent the same change.
      example:
        dns_name_in_zone: dns_name_in_zone
        absolute_name_spec: absolute_name_spec
        created_at: 2000-01-23T04:56:07.000+00:00
        source:
        - source
        - source
        type: type
        view: view
        updated_at: 2000-01-23T04:56:07.000+00:00
        subtype: subtype
        zone: zone
        options: "{}"
        disabled: true
        id: id
        view_name: view_name
        ipam_host: ipam_host
        rdata:
          address: 10.0.0.0
        ttl: 6
        dns_absolute_name_spec: dns_absolute_name_spec
        absolute_zone_name: absolute_zone_name
        tags: "{}"
        inheritance_sources:
          ttl:
            action: action
            source: source
            display_name: display_name
            value: 0
        dns_absolute_zone_name: dns_absolute_zone_name
        comment: comment
        name_in_zone: name_in_zone
        provider_metadata: "{}"
        delegation: delegation
        dns_rdata: dns_rdata
      properties:
        absolute_name_spec:
          description: "Synthetic field, used to determine _zone_ and/or _name_in_zone_\
            \ field for records."
          readOnly: true
          type: string
        absolute_zone_name:
          description: The absolute domain name of the zone where this record belongs.
          readOnly: true
          type: string
        comment:
          description: The description for the DNS resource record. May contain 0
            to 1024 characters. Can include UTF-8.
          type: string
        created_at:
          description: The timestamp when the object has been created.
          format: date-time
          readOnly: true
          type: string
        delegation:
          description: The resource identifier.
          readOnly: true
          type: string
        disabled:
          description: |-
            Indicates if the DNS resource record is disabled. A disabled object is effectively non-existent when generating configuration.

            Defaults to _false_.
          format: boolean
          type: boolean
        dns_absolute_name_spec:
          description: The DNS protocol textual representation of _absolute_name_spec_.
          readOnly: true
          type: string
        dns_absolute_zone_name:
          description: The DNS protocol textual representation of the absolute domain
            name of the zone where this record belongs.
          readOnly: true
          type: string
        dns_name_in_zone:
          description: The DNS protocol textual representation of the relative owner
            name for the DNS zone.
          readOnly: true
          type: string
        dns_rdata:
          description: The DNS protocol textual representation of the DNS resource
            record data.
          readOnly: true
          type: string
        id:
          description: The resource identifier.
          readOnly: true
          type: string
        inheritance_sources:
          $ref: '#/components/schemas/dataRecordInheritance'
        ipam_host:
          description: The resource identifier.
          readOnly: true
          type: string
        name_in_zone:
          description: The relative owner name to the zone origin. Must be specified
            for creating the DNS resource record and is read only for other operations.
          type: string
        options:
          additionalProperties: false
          description: |-
            The DNS resource record type-specific non-protocol options.

            Valid value for _A_ (Address) and _AAAA_ (IPv6 Address) records:

            Option     | Description
            -----------|-----------------------------------------
            create_ptr | A boolean flag which can be set to _true_ for POST operation to automatically create the corresponding PTR record.
            check_rmz  | A boolean flag which can be set to _true_ for POST operation to check the existence of reverse zone for creating the corresponding PTR record. Only applicable if the _create_ptr_ option is set to _true_.


            Valid value for _PTR_ (Pointer) records:

            Option     | Description
            -----------|----------------------------------------
            address    | For GET operation it contains the IPv4 or IPv6 address represented by the PTR record.<br><br>For POST and PATCH operations it can be used to create/update a PTR record based on the IP address it represents. In this case, in addition to the _address_ in the options field, need to specify the _view_ field. |
          type: object
        provider_metadata:
          additionalProperties: false
          description: external DNS provider metadata.
          readOnly: true
          type: object
        rdata:
          additionalProperties: false
          description: "The DNS resource record data in JSON format. Certain DNS resource\
            \ record-specific subfields are required for creating the DNS resource\
            \ record.  \n\nSubfields for _A_ (Address) record:\n\nSubfield | Description\
            \                           |Required\n---------|---------------------------------------|--------\n\
            address  | The IPv4 address of the host.<br><br> | Yes\n\nSubfields for\
            \ _AAAA_ (IPv6 Address) record:\n\nSubfield | Description            \
            \               | Required\n---------|---------------------------------------|---------\n\
            address  | The IPv6 address of the host.<br><br> | Yes\n\nSubfields for\
            \ _CAA_ (Certification Authority Authorization) record:\n\nSubfield |\
            \ Description                           | Required\n---------|---------------------------------------|---------\n\
            flags    | An unsigned 8-bit integer which specifies the CAA record flags.\
            \ RFC 6844 defines one (highest) bit in flag octet, remaining bits are\
            \ deferred for future use. This bit is referenced as _Critical_. When\
            \ the bit is set (flag value == 128), issuers must not issue certificates\
            \ in case CAA records contain unknown property tags.<br><br>Defaults to\
            \ 0.<br><br> | No\ntag      | The CAA record property tag string which\
            \ indicates the type of CAA record. The following property tags are defined\
            \ by RFC 6844:<ul><li>_issue_: Used to explicitly authorize CA to issue\
            \ certificates for the domain in which the property is published.</li><li>_issuewild_:\
            \ Used to explicitly authorize a single CA to issue wildcard certificates\
            \ for the domain in which the property is published.</li><li>_iodef_:\
            \ Used to specify an email address or URL to report invalid certificate\
            \ requests or issuers’ certificate policy violations.</li></ul>Note: _issuewild_\
            \ type takes precedence over _issue_.<br><br> | Yes\nvalue    | A string\
            \ which contains the CAA record property value.<br><br>Specifies the CA\
            \ who is authorized to issue a certificate for the domain if the CAA record\
            \ property tag is _issue_ or _issuewild_.<br><br> Specifies the URL/email\
            \ address to report CAA policy violation for the domain if the CAA record\
            \ property tag is _iodef_.<br><br> | Yes\n\nSubfields for _CNAME_ (Canonical\
            \ Name) record:\n\nSubfield | Description                           |\
            \ Required\n---------|---------------------------------------|---------\n\
            cname    | A domain name which specifies the canonical or primary name\
            \ for the owner. The owner name is an alias. Can be empty.<br><br> | Yes\n\
            \nSubfields for _DNAME_ (Delegation Name) record:\n\nSubfield | Description\
            \                           | Required\n---------|---------------------------------------|---------\n\
            target   | The target domain name to which the zone will be mapped. Can\
            \ be empty.<br><br> | Yes\n\nSubfields for _DHCID_ (DHCP Identifier) record:\n\
            \nSubfield | Description                           | Required\n---------|---------------------------------------|---------\n\
            dhcid    | The Base64 encoded string which contains DHCP client information.<br><br>\
            \ | Yes\n\nSubfields for _MX_ (Mail Exchanger) record:\n\nSubfield   |\
            \ Description                       | Required\n-----------|-----------------------------------|---------\n\
            exchange   | A domain name which specifies a host willing to act as a\
            \ mail exchange for the owner name.<br><br> | Yes\npreference | An unsigned\
            \ 16-bit integer which specifies the preference given to this RR among\
            \ others at the same owner. Lower values are preferred. The range of the\
            \ value is 0 to 65535. <br><br> | Yes\n\nSubfields for _NAPTR_ (Naming\
            \ Authority Pointer) record:\n\nSubfield    | Description            \
            \             | Required\n------------|-------------------------------------|---------\n\
            flags       | A character string containing flags to control aspects of\
            \ the rewriting and interpretation of the fields in the DNS resource record.\
            \ The flags that are currently used are: <ul><li> __U__: Indicates that\
            \ the output maps to a URI (Uniform Record Identifier). </li><li> __S__:\
            \ Indicates that the output is a domain name that has at least one SRV\
            \ record. The DNS client must then send a query for the SRV record of\
            \ the resulting domain name. </li><li> __A__: Indicates that the output\
            \ is a domain name that has at least one A or AAAA record. The DNS client\
            \ must then send a query for the A or AAAA record of the resulting domain\
            \ name. </li><li> __P__: Indicates that the protocol specified in the\
            \ _services_ field defines the next step or phase. </li></ul> | No\norder\
            \       | A 16-bit unsigned integer specifying the order in which the\
            \ NAPTR records must be processed. Low numbers are processed before high\
            \ numbers, and once a NAPTR is found whose rule \"matches\" the target,\
            \ the client must not consider any NAPTRs with a higher value for order\
            \ (except as noted below for the \"flags\" field. The range of the value\
            \ is 0 to 65535. <br><br> | Yes\npreference  |A 16-bit unsigned integer\
            \ that specifies the order in which NAPTR records with equal \"order\"\
            \ values should be processed, low numbers being processed before high\
            \ numbers. This is similar to the preference field in an MX record, and\
            \ is used so domain administrators can direct clients towards more capable\
            \ hosts or lighter weight protocols. A client may look at records with\
            \ higher preference values if it has a good reason to do so such as not\
            \ understanding the preferred protocol or service. The range of the value\
            \ is 0 to 65535.<br><br> | Yes\nregexp      | A string containing a substitution\
            \ expression that is applied to the original string held by the client\
            \ in order to construct the next domain name to lookup.<br><br>Defaults\
            \ to none.<br><br> | No\nreplacement | The next name to query for NAPTR,\
            \ SRV, or address records depending on the value of the _flags_ field.\
            \ This can be an absolute or relative domain name. Can be empty.<br><br>\
            \ | Yes\nservices | Specifies the service(s) available down this rewrite\
            \ path. It may also specify the particular protocol that is used to talk\
            \ with a service. A protocol must be specified if the flags field states\
            \ that the NAPTR is terminal. If a protocol is specified, but the flags\
            \ field does not state that the NAPTR is terminal, the next lookup must\
            \ be for a NAPTR. The client may choose not to perform the next lookup\
            \ if the protocol is unknown, but that behavior must not be relied upon.<br><br>The\
            \ service field may take any of the values below (using the Augmented\
            \ BNF of RFC 2234):<br><br>service_field = [ [protocol] *(\"+\" rs)]<br>protocol\
            \ = ALPHA * 31 ALPHANUM<br>rs = ALPHA * 31 ALPHANUM<br><br>The protocol\
            \ and rs fields are limited to 32 characters and must start with an alphabetic\
            \ character.<br><br> For example, an optional protocol specification followed\
            \ by 0 or more resolution services. Each resolution service is indicated\
            \ by an initial '+' character.<br><br> Note that the empty string is also\
            \ a valid service field.  This will typically be seen at the beginning\
            \ of a series of rules, when it is impossible to know what services and\
            \ protocols will be offered by a particular service.<br><br> The actual\
            \ format of the service request and response will be determined by the\
            \ resolution protocol. Protocols need not offer all services. The labels\
            \ for service requests shall be formed from the set of characters [A-Z0-9].\
            \ The case of the alphabetic characters is not significant.<br><br> |\
            \ Yes\n\nSubfields for _NS_ (Name Server) record:\n\nSubfield | Description\
            \                         | Required\n---------|-------------------------------------|---------\n\
            dname    | A domain-name which specifies a host which should be authoritative\
            \ for the specified class and domain. Can be absolute or relative domain\
            \ name and include UTF-8. <br><br> | Yes\n\nSubfields for _PTR_ (Pointer)\
            \ record:\n\nSubfield | Description                         | Required\n\
            ---------|-------------------------------------|---------\ndname    |\
            \ A domain name which points to some location in the domain name space.\
            \ Can be absolute or relative domain name and include UTF-8. <br><br>\
            \ | Yes\n\nSubfields for _SOA_ (Start of Authority) record:\n\nSubfield\
            \     | Description                         | Required\n------------ |-------------------------------------|---------\n\
            expire       | The time interval in seconds after which zone data will\
            \ expire and secondary server stops answering requests for the zone.<br><br>\
            \ | No\nmname        | The domain name for the master server for the zone.\
            \ Can be absolute or relative domain name.<br><br> | Yes\nnegative_ttl\
            \ | The time interval in seconds for which name servers can cache negative\
            \ responses for zone. <br><br>Defaults to 900 seconds (15 minutes).<br><br>\
            \ | No\nrefresh      | The time interval in seconds that specifies how\
            \ often secondary servers need to send a message to the primary server\
            \ for a zone to check that their data is current, and retrieve fresh data\
            \ if it is not.<br><br>Defaults to 10800 seconds (3 hours).<br><br> |\
            \ No\nretry        | The time interval in seconds for which the secondary\
            \ server will wait before attempting to recontact the primary server after\
            \ a connection failure occurs.<br><br>Defaults to 3600 seconds (1 hour).<br><br>\
            \ | No\nrname        | The domain name which specifies the mailbox of\
            \ the person responsible for this zone. <br><br> | No\nserial       |\
            \ An unsigned 32-bit integer that specifies the serial number of the zone.\
            \ Used to indicate that zone data was updated, so the secondary name server\
            \ can initiate zone transfer. The range of the value is 0 to 4294967295.\
            \ <br><br> | No\n\nSubfields for _SRV_ (Service) record:\n\nSubfield |\
            \ Description                         | Required\n---------|-------------------------------------|---------\n\
            port     | An unsigned 16-bit integer which specifies the port on this\
            \ target host of this service. The range of the value is 0 to 65535. This\
            \ is often as specified in Assigned Numbers but need not be.<br><br> |\
            \ Yes\npriority | An unsigned 16-bit integer which specifies the priority\
            \ of this target host. The range of the value is 0 to 65535. A client\
            \ must attempt to contact the target host with the lowest-numbered priority\
            \ it can reach. Target hosts with the same priority should be tried in\
            \ an order defined by the _weight_ field.<br><br>| Yes\ntarget   | The\
            \ domain name of the target host. There must be one or more address records\
            \ for this name, the name must not be an alias (in the sense of RFC 1034\
            \ or RFC 2181).<br><br>A target of \".\" means that the service is decidedly\
            \ not available at this domain. | Yes\nweight   | An unsigned 16-bit integer\
            \ which specifies a relative weight for entries with the same priority.\
            \ The range of the value is 0 to 65535. Larger weights should be given\
            \ a proportionately higher probability of being selected. Domain administrators\
            \ should use weight 0 when there isn't any server selection to do, to\
            \ make the RR easier to read for humans (less noisy). In the presence\
            \ of records containing weights greater than 0, records with weight 0\
            \ should have a very small chance of being selected.<br><br>In the absence\
            \ of a protocol whose specification calls for the use of other weighting\
            \ information, a client arranges the SRV RRs of the same priority in the\
            \ order in which target hosts, specified by the SRV RRs, will be contacted.<br><br>Defaults\
            \ to 0.<br><br>| No\n\nSubfields for _TXT_ (Text) record:\n\nSubfield\
            \ | Description                         | Required\n---------|-------------------------------------|---------\n\
            text     | The semantics of the text depends on the domain where it is\
            \ found.<br><br> | No\n\nGeneric record can be used to represent any DNS\
            \ resource record not listed above. \nSubfields for a generic record consist\
            \ of a list of struct subfields, each having the following sub-subfields:\n\
            Sub-subfield | Description                        | Required\n-------------|------------------------------------|---------\n\
            type         | Following types are supported:<ul><li>_8BIT_: Unsigned\
            \ 8-bit integer. </li><li> _16BIT_: Unsigned 16-bit integer. </li><li>\
            \ _32BIT_: Unsigned 32-bit integer. </li><li> _IPV6_: IPv6 address. For\
            \ example, \"abcd:123::abcd\". </li><li> _IPV4_: IPv4 address. For example,\
            \ \"1.1.1.1\". </li><li> _DomainName_: Domain name (absolute or relative).\
            \ </li><li> _TEXT_: ASCII text. </li><li> _BASE64_: Base64 encoded binary\
            \ data. </li><li> _HEX_: Hex encoded binary data. </li><li>_PRESENTATION_:\
            \ Presentation is a standard textual form of record data, as shown in\
            \ a standard master zone file. <br><br> For example, an IPSEC RDATA could\
            \ be specified using the PRESENTATION type field whose value is \"10 1\
            \ 2 192.0.2.38 AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==\", instead\
            \ of a sequence of the following subfields: <ul><li> 8BIT: value=10 </li><li>\
            \ 8BIT: value=1 </li><li> 8BIT: value=2 </li><li> IPV4: value=\"192.0.2.38\"\
            \ </li><li> BASE64 (without _length_kind_ sub-subfield): value=\"AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==\"\
            \ </li></ul></li></ul>If type is _PRESENTATION_, only one struct subfield\
            \ can be specified. <br><br> | Yes\nlength_kind  | A string indicating\
            \ the size in bits of a sub-subfield that is prepended to the value and\
            \ encodes the length of the value. Valid values are:<ul><li>_8_: If _type_\
            \ is _ASCII_ or _BASE64_. </li><li>_16_: If _type_ is _HEX_.</li></ul>Defaults\
            \ to none. <br><br>| Only required for some types.\nvalue        | A string\
            \ representing the value for the sub-subfield | Yes"
          example:
            address: 10.0.0.0
          type: object
        source:
          description: |-
            Source indicator                    | Description
            ------------------------------------|--------------------------------
            _STATIC_                            |  Record was created manually by API call to _dns/record_. Valid for all record types except _SOA_.
            _SYSTEM_                            |  Record was created automatically based on name server assignment. Valid for _SOA_, _NS_, _A_, _AAAA_, and _PTR_ record types.
            _DYNAMIC_                           |  Record was created dynamically by performing dynamic update. Valid for all record types except _SOA_.
            _DELEGATED_                         |  Record was created automatically based on delegation servers assignment. Always extends the _SYSTEM_ bit. Valid for _NS_, _A_, _AAAA_, and _PTR_ record types.
            _DTC_                               |  Record was created automatically based on the DTC configuration. Always extends the _SYSTEM_ bit. Valid only for _IBMETA_ record type with _LBDN_ subtype.
            _STATIC_, _SYSTEM_                  |  Record was created manually by API call but it is obfuscated by record generated based on name server assignment.
            _DYNAMIC_, _SYSTEM_                 |  Record was created dynamically by DDNS but it is obfuscated by record generated based on name server assignment.
            _DELEGATED_, _SYSTEM_               |  Record was created automatically based on delegation servers assignment. _SYSTEM_ will always accompany _DELEGATED_.
            _DTC_, _SYSTEM_                     |  Record was created automatically based on the DTC configuration. _SYSTEM_ will always accompany _DTC_.
            _STATIC_, _SYSTEM_, _DELEGATED_     |  Record was created manually by API call but it is obfuscated by record generated based on name server assignment as a result of creating a delegation.
            _DYNAMIC_, _SYSTEM_, _DELEGATED_    |  Record was created dynamically by DDNS but it is obfuscated by record generated based on name server assignment as a result of creating a delegation.
          items:
            type: string
          readOnly: true
          title: |-
            The DNS resource record type-specific non-protocol source.
            The source is a combination of indicators, each tracking how the DNS resource record appeared in system.
            Listed below are source indicators with their meaning:
          type: array
        subtype:
          description: |-
            The DNS resource record subtype specified in the textual mnemonic format. Valid only in case _type_ is _IBMETA_.

            Value | Numeric Type | Description
            ------|--------------|---------------------------------------------
            | 0            | Default value
            LBDN  | 1            | LBDN record
          readOnly: true
          type: string
        tags:
          additionalProperties: false
          description: The tags for the DNS resource record in JSON format.
          type: object
        ttl:
          description: |-
            The record time to live value in seconds. The range of this value is 0 to 2147483647.

            Defaults to TTL value from the SOA record of the zone.
          format: int64
          type: integer
        type:
          description: |-
            The DNS resource record type specified in the textual mnemonic format or in the "TYPEnnn" format where "nnn" indicates the numeric type value.

            Value  | Numeric Type | Description
            -------|--------------|---------------------------------------------
            A      | 1            | Address record
            AAAA   | 28           | IPv6 Address record
            CAA    | 257          | Certification Authority Authorization record
            CNAME  | 5            | Canonical Name record
            DNAME  | 39           | Delegation Name record
            DHCID  | 49           | DHCP Identifier record
            MX     | 15           | Mail Exchanger record
            NAPTR  | 35           | Naming Authority Pointer record
            NS     | 2            | Name Server record
            PTR    | 12           | Pointer record
            SOA    | 6            | Start of Authority record
            SRV    | 33           | Service record
            TXT    | 16           | Text record
            IBMETA | 65536        | Infoblox meta records, not valid for DNS protocol (read-only)
          type: string
        updated_at:
          description: The timestamp when the object has been updated. Equals to _created_at_
            if not updated after creation.
          format: date-time
          readOnly: true
          type: string
        view:
          description: The resource identifier.
          type: string
        view_name:
          description: The display name of the DNS view that contains the parent zone
            of the DNS resource record.
          readOnly: true
          type: string
        zone:
          description: The resource identifier.
          type: string
      required:
      - rdata
      title: Record
      type: object
    dataRecordInheritance:
      description: The inheritance configuration specifies how the _Record_ object
        inherits the _ttl_ field.
      example:
        ttl:
          action: action
          source: source
          display_name: display_name
          value: 0
      properties:
        ttl:
          $ref: '#/components/schemas/inheritance2InheritedUInt32'
      title: RecordInheritance
      type: object
    dataSOASerialIncrementRequest:
      properties:
        fields:
          $ref: '#/components/schemas/protobufFieldMask'
        id:
          description: The resource identifier.
          readOnly: true
          type: string
        serial_increment:
          description: "Default increment SOA serial number by 1,000."
          format: int64
          type: integer
      type: object
    dataSOASerialIncrementResponse:
      description: The SOA Record object serial increment response format.
      example:
        result:
          dns_name_in_zone: dns_name_in_zone
          absolute_name_spec: absolute_name_spec
          created_at: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          type: type
          view: view
          updated_at: 2000-01-23T04:56:07.000+00:00
          subtype: subtype
          zone: zone
          options: "{}"
          disabled: true
          id: id
          view_name: view_name
          ipam_host: ipam_host
          rdata:
            address: 10.0.0.0
          ttl: 6
          dns_absolute_name_spec: dns_absolute_name_spec
          absolute_zone_name: absolute_zone_name
          tags: "{}"
          inheritance_sources:
            ttl:
              action: action
              source: source
              display_name: display_name
              value: 0
          dns_absolute_zone_name: dns_absolute_zone_name
          comment: comment
          name_in_zone: name_in_zone
          provider_metadata: "{}"
          delegation: delegation
          dns_rdata: dns_rdata
      properties:
        result:
          $ref: '#/components/schemas/dataRecord'
      title: SOASerialIncrementResponse
      type: object
    dataUpdateRecordResponse:
      description: The response format to update the __Record__ object.
      example:
        result:
          dns_name_in_zone: dns_name_in_zone
          absolute_name_spec: absolute_name_spec
          created_at: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          type: type
          view: view
          updated_at: 2000-01-23T04:56:07.000+00:00
          subtype: subtype
          zone: zone
          options: "{}"
          disabled: true
          id: id
          view_name: view_name
          ipam_host: ipam_host
          rdata:
            address: 10.0.0.0
          ttl: 6
          dns_absolute_name_spec: dns_absolute_name_spec
          absolute_zone_name: absolute_zone_name
          tags: "{}"
          inheritance_sources:
            ttl:
              action: action
              source: source
              display_name: display_name
              value: 0
          dns_absolute_zone_name: dns_absolute_zone_name
          comment: comment
          name_in_zone: name_in_zone
          provider_metadata: "{}"
          delegation: delegation
          dns_rdata: dns_rdata
      properties:
        result:
          $ref: '#/components/schemas/dataRecord'
      title: UpdateRecordResponse
      type: object
    inheritance2InheritedUInt32:
      description: The inheritance configuration for a field of type _UInt32_.
      example:
        action: action
        source: source
        display_name: display_name
        value: 0
      properties:
        action:
          description: |-
            The inheritance setting for a field.

            Valid values are:
            * _inherit_: Use the inherited value.
            * _override_: Use the value set in the object.

            Defaults to _inherit_.
          type: string
        display_name:
          description: The human-readable display name for the object referred to
            by _source_.
          readOnly: true
          type: string
        source:
          description: The resource identifier.
          readOnly: true
          type: string
        value:
          description: The inherited value.
          format: int64
          readOnly: true
          type: integer
      title: InheritedUInt32
      type: object
    protobufFieldMask:
      description: |-
        paths: "f.a"
            paths: "f.b.d"

        Here `f` represents a field in some root message, `a` and `b`
        fields in the message found in `f`, and `d` a field found in the
        message in `f.b`.

        Field masks are used to specify a subset of fields that should be
        returned by a get operation or modified by an update operation.
        Field masks also have a custom JSON encoding (see below).

        # Field Masks in Projections

        When used in the context of a projection, a response message or
        sub-message is filtered by the API to only contain those fields as
        specified in the mask. For example, if the mask in the previous
        example is applied to a response message as follows:

            f {
              a : 22
              b {
                d : 1
                x : 2
              }
              y : 13
            }
            z: 8

        The result will not contain specific values for fields x,y and z
        (their value will be set to the default, and omitted in proto text
        output):


            f {
              a : 22
              b {
                d : 1
              }
            }

        A repeated field is not allowed except at the last position of a
        paths string.

        If a FieldMask object is not present in a get operation, the
        operation applies to all fields (as if a FieldMask of all fields
        had been specified).

        Note that a field mask does not necessarily apply to the
        top-level response message. In case of a REST get operation, the
        field mask applies directly to the response, but in case of a REST
        list operation, the mask instead applies to each individual message
        in the returned resource list. In case of a REST custom method,
        other definitions may be used. Where the mask applies will be
        clearly documented together with its declaration in the API.  In
        any case, the effect on the returned resource/resources is required
        behavior for APIs.

        # Field Masks in Update Operations

        A field mask in update operations specifies which fields of the
        targeted resource are going to be updated. The API is required
        to only change the values of the fields as specified in the mask
        and leave the others untouched. If a resource is passed in to
        describe the updated values, the API ignores the values of all
        fields not covered by the mask.

        If a repeated field is specified for an update operation, the existing
        repeated values in the target resource will be overwritten by the new values.
        Note that a repeated field is only allowed in the last position of a `paths`
        string.

        If a sub-message is specified in the last position of the field mask for an
        update operation, then the existing sub-message in the target resource is
        overwritten. Given the target message:

            f {
              b {
                d : 1
                x : 2
              }
              c : 1
            }

        And an update message:

            f {
              b {
                d : 10
              }
            }

        then if the field mask is:

         paths: "f.b"

        then the result will be:

            f {
              b {
                d : 10
              }
              c : 1
            }

        However, if the update mask was:

         paths: "f.b.d"

        then the result would be:

            f {
              b {
                d : 10
                x : 2
              }
              c : 1
            }

        In order to reset a field's value to the default, the field must
        be in the mask and set to the default value in the provided resource.
        Hence, in order to reset all fields of a resource, provide a default
        instance of the resource and set all fields in the mask, or do
        not provide a mask as described below.

        If a field mask is not present on update, the operation applies to
        all fields (as if a field mask of all fields has been specified).
        Note that in the presence of schema evolution, this may mean that
        fields the client does not know and has therefore not filled into
        the request will be reset to their default. If this is unwanted
        behavior, a specific service may require a client to always specify
        a field mask, producing an error if not.

        As with get operations, the location of the resource which
        describes the updated values in the request message depends on the
        operation kind. In any case, the effect of the field mask is
        required to be honored by the API.

        ## Considerations for HTTP REST

        The HTTP kind of an update operation which uses a field mask must
        be set to PATCH instead of PUT in order to satisfy HTTP semantics
        (PUT must only be used for full updates).

        # JSON Encoding of Field Masks

        In JSON, a field mask is encoded as a single string where paths are
        separated by a comma. Fields name in each path are converted
        to/from lower-camel naming conventions.

        As an example, consider the following message declarations:

            message Profile {
              User user = 1;
              Photo photo = 2;
            }
            message User {
              string display_name = 1;
              string address = 2;
            }

        In proto a field mask for `Profile` may look as such:

            mask {
              paths: "user.display_name"
              paths: "photo"
            }

        In JSON, the same mask is represented as below:

            {
              mask: "user.displayName,photo"
            }

        # Field Masks and Oneof Fields

        Field masks treat fields in oneofs just as regular fields. Consider the
        following message:

            message SampleMessage {
              oneof test_oneof {
                string name = 4;
                SubMessage sub_message = 9;
              }
            }

        The field mask can be:

            mask {
              paths: "name"
            }

        Or:

            mask {
              paths: "sub_message"
            }

        Note that oneof type names ("test_oneof" in this case) cannot be used in
        paths.

        ## Field Mask Verification

        The implementation of the all the API methods, which have any FieldMask type
        field in the request, should verify the included field paths, and return
        `INVALID_ARGUMENT` error if any path is duplicated or unmappable.
      properties:
        paths:
          description: The set of field mask paths.
          items:
            type: string
          type: array
      title: "`FieldMask` represents a set of symbolic field paths, for example:"
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
x-original-swagger-version: "2.0"
