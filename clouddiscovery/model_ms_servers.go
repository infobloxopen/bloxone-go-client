/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the MSServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MSServers{}

// MSServers struct for MSServers
type MSServers struct {
	DnsHostId            *string `json:"dns_host_id,omitempty"`
	ServerIp             *string `json:"server_ip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MSServers MSServers

// NewMSServers instantiates a new MSServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMSServers() *MSServers {
	this := MSServers{}
	return &this
}

// NewMSServersWithDefaults instantiates a new MSServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMSServersWithDefaults() *MSServers {
	this := MSServers{}
	return &this
}

// GetDnsHostId returns the DnsHostId field value if set, zero value otherwise.
func (o *MSServers) GetDnsHostId() string {
	if o == nil || IsNil(o.DnsHostId) {
		var ret string
		return ret
	}
	return *o.DnsHostId
}

// GetDnsHostIdOk returns a tuple with the DnsHostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSServers) GetDnsHostIdOk() (*string, bool) {
	if o == nil || IsNil(o.DnsHostId) {
		return nil, false
	}
	return o.DnsHostId, true
}

// HasDnsHostId returns a boolean if a field has been set.
func (o *MSServers) HasDnsHostId() bool {
	if o != nil && !IsNil(o.DnsHostId) {
		return true
	}

	return false
}

// SetDnsHostId gets a reference to the given string and assigns it to the DnsHostId field.
func (o *MSServers) SetDnsHostId(v string) {
	o.DnsHostId = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *MSServers) GetServerIp() string {
	if o == nil || IsNil(o.ServerIp) {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSServers) GetServerIpOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIp) {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *MSServers) HasServerIp() bool {
	if o != nil && !IsNil(o.ServerIp) {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *MSServers) SetServerIp(v string) {
	o.ServerIp = &v
}

func (o MSServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MSServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsHostId) {
		toSerialize["dns_host_id"] = o.DnsHostId
	}
	if !IsNil(o.ServerIp) {
		toSerialize["server_ip"] = o.ServerIp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MSServers) UnmarshalJSON(data []byte) (err error) {
	varMSServers := _MSServers{}

	err = json.Unmarshal(data, &varMSServers)

	if err != nil {
		return err
	}

	*o = MSServers(varMSServers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dns_host_id")
		delete(additionalProperties, "server_ip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMSServers struct {
	value *MSServers
	isSet bool
}

func (v NullableMSServers) Get() *MSServers {
	return v.value
}

func (v *NullableMSServers) Set(val *MSServers) {
	v.value = val
	v.isSet = true
}

func (v NullableMSServers) IsSet() bool {
	return v.isSet
}

func (v *NullableMSServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMSServers(val *MSServers) *NullableMSServers {
	return &NullableMSServers{value: val, isSet: true}
}

func (v NullableMSServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMSServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
