/*
BloxOne FW API

Testing AccessCodesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fw

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/infobloxopen/bloxone-go-client/fw"
	"github.com/infobloxopen/bloxone-go-client/internal"
)

func Test_fw_AccessCodesAPIService(t *testing.T) {

	configuration := internal.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccessCodesAPIService AccessCodesCreateAccessCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessCodesAPI.AccessCodesCreateAccessCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessCodesAPIService AccessCodesDeleteAccessCodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AccessCodesAPI.AccessCodesDeleteAccessCodes(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessCodesAPIService AccessCodesDeleteSingleAccessCodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessKey string

		httpRes, err := apiClient.AccessCodesAPI.AccessCodesDeleteSingleAccessCodes(context.Background(), accessKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessCodesAPIService AccessCodesListAccessCodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessCodesAPI.AccessCodesListAccessCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessCodesAPIService AccessCodesReadAccessCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessKey string

		resp, httpRes, err := apiClient.AccessCodesAPI.AccessCodesReadAccessCode(context.Background(), accessKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessCodesAPIService AccessCodesUpdateAccessCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payloadAccessKey string

		resp, httpRes, err := apiClient.AccessCodesAPI.AccessCodesUpdateAccessCode(context.Background(), payloadAccessKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
