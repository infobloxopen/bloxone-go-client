openapi: 3.0.1
info:
  description: |
    BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.

    The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in today’s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.

    Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.
  title: BloxOne FW API
  version: v1
servers:
- url: https://csp.infoblox.com/api/atcfw/v1/
paths:
  /access_codes:
    delete:
      description: |+
        Use this method to delete Bypass Code objects. Deletion of
        multiple bypass codes is an all-or-nothing operation (if any of
        the specified bypass codes cannot be deleted then none of the
        specified bypass codes will be deleted).

        Required:
        - ids

      operationId: access_codesDeleteAccessCodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwAccessCodeDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesDeleteAccessCodes_400_response'
          description: |2-

            - 'ids' value must contain unique elements
            - 'ids' value must contain existing bypass code key
            - Cannot delete bypass code assigned to policy
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Access Codes
      tags:
      - access_codes
      x-codegen-request-body-name: body
    get:
      description: |+
        Use this method to retrieve a collection of Bypass Code objects.

      operationId: access_codesListAccessCodes
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Op                |
          | ------------------ | ------ | --------------------------- |
          | access_key         | string | !=, ==, ~, !~, >, <, <=, >= |
          | name               | string | !=, ==, ~, !~, >, <, <=, >= |
          | description        | string | !=, ==, ~, !~, >, <, <=, >= |
          | security_policy_id | int32  | !=, ==, >, <, <=, >=        |

          In addition, grouping operators are supported:

          | Op  | Description          |
          | --- | -------------------- |
          | and | Logical AND          |
          | or  | Logical OR           |
          | not | Logical NOT          |
          | ()  | Groupping Operators  |

          Example:
          ```
          ?_filter="((name=='acc_code')or(name~'key'))and(security_policy_id!=32)"
          ```
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwAccessCodeMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Access Codes
      tags:
      - access_codes
    post:
      description: |+
        Use this method to create the Bypass Code corresponding to the
        security rules passed.
        It's an atomic operation. It should create all the security rules
        and create the policy and bypass codes, or do nothing if any of them fails.

        Required:
        - name
        - rules
        - activation
        - expiration



      operationId: access_codesCreateAccessCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwAccessCode'
        description: The Bypass Code object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwAccessCodeCreateResponse'
          description: POST operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - Expiration date must be after activation date
            - Cannot enter expired Bypass Code
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_404_response'
          description: |2-

            - Threat Feed and TI rules must contain existing threat feeds and TI lists
            - Custom Redirect rules must contain existing Custom Redirect
            - Custom List rules must contain existing Custom List
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_409_response'
          description: |2-

            - 'name' value must be unique among bypass codes belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Create Access Codes
      tags:
      - access_codes
      x-codegen-request-body-name: body
  /access_codes/{access_key}:
    delete:
      description: |+
        Use this method to delete Bypass Code object.

      operationId: access_codesDeleteSingleAccessCodes
      parameters:
      - description: The Bypass Code identifier.
        in: path
        name: access_key
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesDeleteSingleAccessCodes_400_response'
          description: |2-

            - 'id' value must contain existing bypass code key
            - Cannot delete bypass code assigned to policy
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Access Code By ID
      tags:
      - access_codes
    get:
      description: |+
        Use this method to retrieve the Bypass Code by key.

      operationId: access_codesReadAccessCode
      parameters:
      - description: The Bypass Code identifier.
        in: path
        name: access_key
        required: true
        schema:
          type: string
      - description: The Bypass Code name.
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwAccessCodeReadResponse'
          description: GET operation response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesReadAccessCode_404_response'
          description: |2-

            - 'access_codes' value must contain existing bypass code key
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Read Access Codes
      tags:
      - access_codes
  /access_codes/{payload.access_key}:
    put:
      description: |+
        Use this method to update the Bypass Code corresponding to the security rules passed.
        It's an atomic operation. It should delete existing security rules and
        create all the new security rules for the bypass code,
        or do nothing if any of them fails.

        Required:
        - name
        - rules
        - dfps
        - network_lists
        - roaming_device_groups



      operationId: access_codesUpdateAccessCode
      parameters:
      - description: Auto generated unique Bypass Code value
        in: path
        name: payload.access_key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwAccessCode'
        description: The Bypass Code object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwAccessCodeUpdateResponse'
          description: PUT operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - Expiration date must be after activation date
            - Cannot enter expired Bypass Code
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_404_response'
          description: |2-

            - Threat Feed and TI rules must contain existing threat feeds and TI lists
            - Custom Redirect rules must contain existing Custom Redirect
            - Custom List rules must contain existing Custom List
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_409_response'
          description: |2-

            - 'name' value must be unique among bypass codes belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Access Codes
      tags:
      - access_codes
      x-codegen-request-body-name: body
  /app_approvals:
    get:
      operationId: app_approvalsListAppApprovals
      parameters:
      - description: "\n\nA collection of response resources can be filtered by a\
          \ logical expression string that includes JSON tag references to values\
          \ in each resource, literal values, and logical operators. If a resource\
          \ does not have the specified tag, its value is assumed to be null.\n\n\
          Literal values include numbers (integer and floating-point), and quoted\
          \ (both single- or double-quoted) literal strings, and 'null'. The following\
          \ operators are commonly used in filter expressions:\n\n|  Op   |  Description\
          \               | \n|  --   |  -----------               | \n|  ==   | \
          \ Equal                     | \n|  !=   |  Not Equal                 | \n\
          |  >    |  Greater Than              | \n|   >=  |  Greater Than or Equal\
          \ To  | \n|  <    |  Less Than                 | \n|  <=   |  Less Than\
          \ or Equal To     | \n|  and  |  Logical AND               | \n|  ~    |\
          \  Matches Regex             | \n|  !~   |  Does Not Match Regex      |\
          \ \n|  or   |  Logical OR                | \n|  not  |  Logical NOT    \
          \           | \n|  ()   |  Groupping Operators       |\n\n\t\t\t\t\t\t"
        in: query
        name: _filter
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwAppApprovalMultiResponse'
          description: GET operation response
      tags:
      - app_approvals
    patch:
      operationId: app_approvalsUpdateAppApprovals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwAppApprovalsUpdateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwAppApprovalMultiResponse'
          description: PATCH operation response
      tags:
      - app_approvals
      x-codegen-request-body-name: body
    put:
      description: |+
        Use this method to update the specified Application Approved object.

        Required: an array of approvals
        - status
        - app_name

      operationId: app_approvalsReplaceAppApprovals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwAppApprovalsReplaceRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwAppApprovalMultiResponse'
          description: PUT operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Application Approval.
      tags:
      - app_approvals
      x-codegen-request-body-name: body
  /application_filters:
    delete:
      description: |+
        Use this method to delete Application Filter objects. Deletion of multiple lists is an all-or-nothing operation (if any of the specified lists can not be deleted then none of the specified lists will be deleted).

        Required:
        - ids

      operationId: application_filtersDeleteApplicationFilters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwApplicationFiltersDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_filtersDeleteApplicationFilters_400_response'
          description: |2-

            - 'ids' value must contain existing application filter identifiers
            - application filters assigned to a security policy cannot be deleted
            - application filters assigned to a bypass code cannot be deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Application Filters.
      tags:
      - application_filters
      x-codegen-request-body-name: body
    get:
      description: |+
        Use this method to retrieve information on all Application Filter objects for the account.

      operationId: application_filtersListApplicationFilters
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name                    | type   | Supported Op                |
          | ----------------------- | ------ | --------------------------- |
          | name                    | string | !=, ==, ~, !~, >, <, <=, >= |

          In addition grouping operators are supported:

          | Op  | Description          |
          | --- | -------------------- |
          | and | Logical AND          |
          | or  | Logical OR           |
          | not | Logical NOT          |
          | ()  | Groupping Operators  |

          Allowed sets of parameters that can be groupped in one query:

          - name

          Example:
          ```
          ?_filter="((name=='app_list1')or(name~'app_list2'))"
          ```
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: Filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: Sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwApplicationFilterMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Application Filters.
      tags:
      - application_filters
    post:
      description: |
        Use this method to create a Application Filter object.

        Required:
        - name
        - criteria
      operationId: application_filtersCreateApplicationFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwApplicationFilter'
        description: The Application Filter object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwApplicationFilterCreateResponse'
          description: POST operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Create Application Filter.
      tags:
      - application_filters
      x-codegen-request-body-name: body
  /application_filters/{id}:
    delete:
      description: |
        Use this method to delete single Application filter object by id.
      operationId: application_filtersDeleteSingleApplicationFilters
      parameters:
      - description: The Application Filter object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_filtersDeleteSingleApplicationFilters_400_response'
          description: |2-

            - 'id' value must contain values that are greater than or equal to zero
            - application filter assigned to a security policy cannot be deleted
            - application filter assigned to a bypass code cannot be deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Application Filter Object by ID.
      tags:
      - application_filters
    get:
      description: |
        Use this method to retrieve information on the specified Application Filter object.

        Required:
        - id
      operationId: application_filtersReadApplicationFilter
      parameters:
      - description: The Application Filter object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: The name of the application filter.
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwApplicationFilterReadResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Read Application Filter.
      tags:
      - application_filters
    put:
      description: |
        Use this method to update the specified Application Filter object.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

        Required:
        - id
        - name
        - criteria
      operationId: application_filtersUpdateApplicationFilter
      parameters:
      - description: The Application Filter object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwApplicationFilter'
        description: The Application Filter object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwApplicationFilterUpdateResponse'
          description: PUT operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Application Filter.
      tags:
      - application_filters
      x-codegen-request-body-name: body
  /category_filters:
    delete:
      description: |+
        Use this method to delete Category Filter object.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

        Required:
        - ids

      operationId: category_filtersDeleteCategoryFilters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwCategoryFiltersDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersDeleteCategoryFilters_400_response'
          description: |2-

            - 'ids' value must be non-empty
            - 'ids' value must contain unique elements
            - 'ids' value must contain values that are greater than or equal to zero
            - category filters assigned to a security policy cannot be deleted
            - category filters assigned to a bypass code cannot be deleted
            - 'ids' value must contain existing category filter identifiers
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Category Filters By ID.
      tags:
      - category_filters
      x-codegen-request-body-name: body
    get:
      description: |+
        Use this method to retrieve information on all Category Filter objects for the account.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

      operationId: category_filtersListCategoryFilters
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Op                |
          | ------------------ | ------ | --------------------------- |
          | name               | string | !=, ==, ~, !~, >, <, <=, >= |

          In addition, grouping operators are supported:

          | Op  | Description          |
          | --- | -------------------- |
          | and | Logical AND          |
          | or  | Logical OR           |
          | not | Logical NOT          |
          | ()  | Groupping Operators  |

          Example:
          ```
          ?_filter="((name=='cat-filter')or(name~'key'))and(name!='something')"
          ```
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: Filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: Sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwCategoryFilterMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Category Filters.
      tags:
      - category_filters
    post:
      description: |
        Use this method to create a Category Filter object.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

        Required:
        - name
        - categories
      operationId: category_filtersCreateCategoryFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwCategoryFilter'
        description: The Category Filter object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwCategoryFilterCreateResponse'
          description: POST operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_400_response'
          description: |2-

            - 'name' value must not be empty
            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'categories' value must not be empty
            - 'categories' value must contain existing content categories
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_409_response'
          description: |2-

            - 'name' value must be unique among category filters belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Create Category Filter.
      tags:
      - category_filters
      x-codegen-request-body-name: body
  /category_filters/{id}:
    delete:
      description: |
        Use this method to delete Category Filter objects.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.
      operationId: category_filtersDeleteSingleCategoryFilters
      parameters:
      - description: The Category Filter object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_filtersDeleteSingleApplicationFilters_400_response'
          description: |2-

            - 'id' value must contain values that are greater than or equal to zero
            - 'ids' value must contain existing category filter identifiers
            - category filter assigned to a security policy cannot be deleted
            - category filter assigned to a bypass code cannot be deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Category Filters.
      tags:
      - category_filters
    get:
      description: |
        Use this method to retrieve information on the specified Category Filter object.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.
      operationId: category_filtersReadCategoryFilter
      parameters:
      - description: The Category Filter object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwCategoryFilterReadResponse'
          description: GET operation response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersReadCategoryFilter_404_response'
          description: |2-

            - 'id' value must contain existing category filter identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Read Category Filter.
      tags:
      - category_filters
    put:
      description: |
        Use this method to update the specified Category Filter object.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

        Required:
        - name
        - categories
      operationId: category_filtersUpdateCategoryFilter
      parameters:
      - description: The Category Filter object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwCategoryFilter'
        description: The Category Filter object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwCategoryFilterUpdateResponse'
          description: PUT operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_400_response'
          description: |2-

            - 'name' value must not be empty
            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'categories' value must not be empty
            - 'categories' value must contain existing content categories
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersReadCategoryFilter_404_response'
          description: |2-

            - 'id' value must contain existing category filter identifier
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_409_response'
          description: |2-

            - 'name' value must be unique among category filters belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Category Filter.
      tags:
      - category_filters
      x-codegen-request-body-name: body
  /content_categories:
    get:
      description: |
        Use this method to retrieve information on all Content Category objects for the account.

        The Content Category object represents a specific internet content and used to configure category filters. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content.
      operationId: content_categoriesListContentCategories
      parameters:
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwContentCategoryMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Content Categories.
      tags:
      - content_categories
  /internal_domain_lists:
    delete:
      description: |
        Use this method to delete Internal Domains objects for the account by a given list of internal domain list ids.

        The internal domain list is a transport object for reporting gathering internal domains. This feature allows users to configure internal domains lists for specific DFP and ATEP groups. This lists provides the users to create ‘Internal Domains List’ objects with a name, description, and a list of domains/ip/cidr. These lists are referenced by and attached to DFP, and ATEP groups.
        Once attached to DFP, dfp configuration endpoints will return the values under all associated domain lists as domains.

        Once attached to ATEP, atep login endpoint will return the values under all associated lists as internal_domain_lists.

        Required:
        - ids
      operationId: internal_domain_listsDeleteInternalDomains
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwInternalDomainsDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsDeleteInternalDomains_400_response'
          description: |2

            - 'ids' value must be non-empty
            - 'ids' value must contain unique elements
            - 'ids' value must contain values that are greater than or equal to zero
            - internal domain list assigned to a endpoint group cannot be deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsDeleteInternalDomains_404_response'
          description: |2-

            - 'ids' value must contain existing internal domains identifiers
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Internal Domains.
      tags:
      - internal_domain_lists
      x-codegen-request-body-name: body
    get:
      description: |+
        Use this method to retrieve information on all Internal Domains objects for the account.

        The internal domain list is a transport object for reporting gathering internal domains. This feature allows users to configure internal domains lists for specific DFP and ATEP groups. This lists provides the users to create ‘Internal Domains List’ objects with a name, description, and a list of domains/ip/cidr. These lists are referenced by and attached to DFP, and ATEP groups.
        Once attached to DFP, dfp configuration endpoints will return the values under all associated domain lists as domains.

        Once attached to ATEP, atep login endpoint will return the values under all associated lists as internal_domain_lists.

      operationId: internal_domain_listsListInternalDomains
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Op                |
          | ------------------ | ------ | --------------------------- |
          | id                 | int32  | !=, ==, >, <, <=, >=        |
          | name               | string | !=, ==, ~, !~, >, <, <=, >= |
          | description        | string | !=, ==, ~, !~, >, <, <=, >= |
          | items              | string | ~, !~                       |
          | is_default         | bool   | !=, ==                      |

          In addition grouping operators are supported:

          | Op  | Description          |
          | --- | -------------------- |
          | and | Logical AND          |
          | or  | Logical OR           |
          | not | Logical NOT          |
          | ()  | Grouping Operators  |

          Example:
          ```
          ?_filter="((name=='internal_dom_a')or(name~'internal_dom_b'))"
          ```
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: Filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: Sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwInternalDomainsMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Internal Domains.
      tags:
      - internal_domain_lists
      x-tf-resource: td_internal_domain_list
      x-tf-datasource: td_internal_domain_lists
    post:
      description: |+
        Use this method to create Internal Domains objects for the account.

        The internal domain list is a transport object for reporting gathering internal domains. This feature allows users to configure internal domains lists for specific DFP and ATEP groups. This lists provides the users to create ‘Internal Domains List’ objects with a name, description, and a list of domains/ip/cidr. These lists are referenced by and attached to DFP, and ATEP groups.
        Once attached to DFP, dfp configuration endpoints will return the values under all associated domain lists as domains.

        Once attached to ATEP, atep login endpoint will return the values under all associated lists as internal_domain_lists.


        Required:
        - name
        - internal_domains

      operationId: internal_domain_listsCreateInternalDomains
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwInternalDomains'
        description: The Internal Domains object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwInternalDomainsCreateResponse'
          description: POST operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsCreateInternalDomains_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'internal_domains' must not contain existing Internal domain Lists
            - 'Non-empty lists'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsCreateInternalDomains_409_response'
          description: |2-

            - 'name' value must be unique among internal domains lists belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Create Internal Domains.
      tags:
      - internal_domain_lists
      x-codegen-request-body-name: body
  /internal_domain_lists/{id}:
    delete:
      description: |+
        Use this method to delete Internal Domains objects for the account by a given internal domain list id.

        The internal domain list is a transport object for reporting gathering internal domains. This feature allows users to configure internal domains lists for specific DFP and ATEP groups. This lists provides the users to create ‘Internal Domains List’ objects with a name, description, and a list of domains/ip/cidr. These lists are referenced by and attached to DFP, and ATEP groups.
        Once attached to DFP, dfp configuration endpoints will return the values under all associated domain lists as domains.

        Once attached to ATEP, atep login endpoint will return the values under all associated lists as internal_domain_lists.


      operationId: internal_domain_listsDeleteSingleInternalDomains
      parameters:
      - description: The Internal Domains object identifiers.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsDeleteSingleInternalDomains_400_response'
          description: |2

            - 'id' value must contain values that are greater than or equal to zero
            - internal domain list assigned to a endpoint group cannot be deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsDeleteInternalDomains_404_response'
          description: |2-

            - 'id' value must contain existing internal domains identifiers
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Internal Domains.
      tags:
      - internal_domain_lists
    get:
      description: |
        Use this method to read Internal Domains objects for the account by a internal domain list id.

        The internal domain list is a transport object for reporting gathering internal domains. This feature allows users to configure internal domains lists for specific DFP and ATEP groups. This lists provides the users to create ‘Internal Domains List’ objects with a name, description, and a list of domains/ip/cidr. These lists are referenced by and attached to DFP, and ATEP groups.
        Once attached to DFP, dfp configuration endpoints will return the values under all associated domain lists as domains.

        Once attached to ATEP, atep login endpoint will return the values under all associated lists as internal_domain_lists.
      operationId: internal_domain_listsReadInternalDomains
      parameters:
      - description: The Internal Domains object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: |-
          The name of InternalDomains object.
          Used if id==0.
        in: query
        name: name
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwInternalDomainsReadResponse'
          description: GET operation response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsReadInternalDomains_404_response'
          description: |2-

            - 'id' value must contain existing internal domain lists identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Read Internal Domains.
      tags:
      - internal_domain_lists
    put:
      description: |
        Use this method to update Internal Domains objects for the account by a internal domain list id.

        The internal domain list is a transport object for reporting gathering internal domains. This feature allows users to configure internal domains lists for specific DFP and ATEP groups. This lists provides the users to create ‘Internal Domains List’ objects with a name, description, and a list of domains/ip/cidr. These lists are referenced by and attached to DFP, and ATEP groups.
        Once attached to DFP, dfp configuration endpoints will return the values under all associated domain lists as domains.

        Once attached to ATEP, atep login endpoint will return the values under all associated lists as internal_domain_lists.

        Required:
        - name
        - internal_domains
      operationId: internal_domain_listsUpdateInternalDomains
      parameters:
      - description: The Internal Domain object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwInternalDomains'
        description: The Internal Domains object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwInternalDomainsUpdateResponse'
          description: PUT operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsUpdateInternalDomains_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'internal_domains' must contain existing internal domain Lists
            - 'internal_domains' values is not a domain, cidr, or ip
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsUpdateInternalDomains_404_response'
          description: |2

            - 'id' value must contain existing internal domains list identifier
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsCreateInternalDomains_409_response'
          description: |2-

            - 'name' value must be unique among internal domains belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Internal Domains.
      tags:
      - internal_domain_lists
      x-codegen-request-body-name: body
  /internal_domain_lists/{id}/items:
    patch:
      description: |
        Use this method to insert ot delete items  for a specified Named List object. Note that duplicated items are silently skipped and only new items are appended to the named list.
        Note that DNSM, TI, Fast Flux, custom lists and DGA lists cannot be updated. Only Internal Domains items can be updated.

        The Internal Domains Items represent the list of the FQDN or IPv4 addresses to define whitelists for additional protection.
      operationId: internal_domain_listsInternalDomainsItemsPartialUpdate
      parameters:
      - description: The Internal Domain List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwInternalDomainsItems'
        description: The Internal Domains Items Patch object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwInternalDomainsItemsPartialResponse'
          description: PATCH operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsInternalDomainsItemsPartialUpdate_400_response'
          description: |2-

            - 'id' value must be greater than or equal to zero
            - Invalid domain or IP address or network.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsInternalDomainsItemsPartialUpdate_404_response'
          description: |2-

            - 'id' value must contain existing named list identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Patch Internal Domains.
      tags:
      - internal_domain_lists
      x-codegen-request-body-name: body
  /named_lists:
    delete:
      description: |
        Use this method to delete Named List objects. Deletion of multiple lists is an all-or-nothing operation (if any of the specified lists can not be deleted then none of the specified lists will be deleted).

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed. Note that lists representing predefined TI feeds cannot be created, updated and deleted.

        Required:
        - ids
      operationId: named_listsDeleteNamedLists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNamedListsDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsDeleteNamedLists_400_response'
          description: |2-

            - 'ids' value must be non-empty
            - 'ids' value must contain unique elements
            - 'ids' value must contain values that are greater than or equal to zero
            - named lists assigned to a security policy cannot be deleted
            - named lists of type 'dnsm', 'threat_insight', 'fast_flux', 'dga', 'threat_insight_nde', 'default_allow' and 'default_block' cannot be removed
            - named lists assigned to a bypass code cannot be deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsDeleteNamedLists_404_response'
          description: |2-

            - 'ids' value must contain existing named list identifiers
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Named Lists.
      tags:
      - named_lists
      x-codegen-request-body-name: body
    get:
      description: |+
        Use this method to retrieve information on all Named List objects for the account. Note that list items are not returned for this operation.

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed. Note that lists representing predefined TI feeds cannot be created, updated and deleted.


      operationId: named_listsListNamedLists
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Ops    |
          | ------------------ | ------ | ---------------- |
          | type               | string | ==, !=           |
          | items              | string | ~, !~            |
          | items_described    | string | ==               |

          Grouping operators (and, or, not, ()) are not supported between different fields.
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: Filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: Sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListReadMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Named Lists.
      tags:
      - named_lists
    patch:
      description: |-
        Multiple Named Lists in a single operation.
        Use this method to insert items for multiple Named List objects. Note that duplicated items correspondig to named list are silently skipped and only new items are appended to the named list. Note that DNSM, TI, Fast Flux and DGA lists cannot be updated. Only named lists of Custom List type can be updated by this operation.
        If one or more of the list ids is invalid, or the list is of invalid type then the entire operation will be failed.
        The Custom List Items represent the list of the FQDN or IPv4 addresses to define whitelists and blacklists for additional protection.
      operationId: named_listsMultiListUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwMultiListUpdate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwMultiListUpdateResponse'
          description: PATCH operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_domain_listsInternalDomainsItemsPartialUpdate_400_response'
          description: |2-

            - 'ids' values must be greater than or equal to zero
            - 'inserted_items_described' value must contain either valid domain names or IPv4 or network addresses.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsMultiListUpdate_404_response'
          description: |2-

            - 'ids' values must contain existing named list identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Patch Multiple Named Lists.
      tags:
      - named_lists
      x-codegen-request-body-name: body
    post:
      description: |
        Use this method to create a Named List object.

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed. Note that lists representing predefined TI feeds cannot be created, updated and deleted. Also use of the field 'items' is discouraged and instead use of new field 'item_described' is suggested as it is possible to add the description/comments to each item in the custom list using this field. In any case, note that use of both the fields 'items' and 'items_described' is not supported and when one of these field is used they must have some value i.e, it cannot be empty.

        Required:
        - name
        - type
        - items or items_described
      operationId: named_listsCreateNamedList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNamedList'
        description: The Named List object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListCreateResponse'
          description: POST operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'items' value must contain valid IPv4 or IPv6 addresses or domain names
            - named list of type "dnsm", "threat_insight", "fast_flux", "dga", "threat_insight_nde", "default_allow", "default_block", "threat_insight_nde" cannot be created
            - Either 'items' or 'items_described' field is required
            - 'item' cannot be empty in field items_described
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsCreateNamedList_409_response'
          description: |2-

            - 'name' value must be unique among named lists belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Create Named List.
      tags:
      - named_lists
      x-codegen-request-body-name: body
  /named_lists/{id}:
    delete:
      description: |
        Use this method to delete Named List object by given Named List object identifier.

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed. Note that lists representing predefined TI feeds cannot be created, updated and deleted.
      operationId: named_listsDeleteSingleNamedLists
      parameters:
      - description: The Named List object identifiers.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_filtersDeleteSingleApplicationFilters_400_response'
          description: |2-

            - 'id' value must contain values that are greater than or equal to zero
            - named lists assigned to a security policy cannot be deleted
            - named lists assigned to a bypass code cannot be deleted
            - named lists of type 'dnsm', 'threat_insight', 'fast_flux', 'dga', 'threat_insight_nde', 'default_allow', and 'default_block' cannot be removed
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsDeleteSingleNamedLists_404_response'
          description: |2-

            - 'id' value must contain existing named list identifiers
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Named Lists.
      tags:
      - named_lists
    get:
      description: |
        Use this method to retrieve information on the specified Named List object. Note that returned data includes list items.

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed. Note that lists representing predefined TI feeds cannot be created, updated and deleted.
      operationId: named_listsReadNamedList
      parameters:
      - description: The Named List identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: |-
          The name of the named list.
          Can be used in pair with 'type' (both fields are mandatory) to request
          the object by their name. This aproach available only if the field 'id'
          is empty (==0).
        in: query
        name: name
        schema:
          type: string
      - description: The type of the named list. See 'NamedList' for more details.
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListReadResponse'
          description: GET operation response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsMultiListUpdate_404_response'
          description: |2-

            - 'id' value must contain existing named list identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Read Named List.
      tags:
      - named_lists
    patch:
      description: |
        Use this method to update the Severity for a specified named list, which must be of TI list type.

        The severity levels (threat_level and confidence_level) can only be patched for a given id of a TI List.
        This patch request only accepts threat_level and confidence level as the attributes. At least one of these two attributes must be present in the request. If only one of the two attributes is present, only that attribute is set to the specified value for the specified list and other attribute will be at the present value.
        This operation is currently applicable only for the TI Lists.

        Required:
        - id
        - threat_level or confidence_level
      operationId: named_listsUpdateNamedListPartial
      parameters:
      - description: The Named List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwListSeverityLevels'
        description: The Named List object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListUpdateResponse'
          description: PATCH operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsUpdateNamedListPartial_400_response'
          description: |2

            - Either 'threat_level' or 'confidence_level' field is required
            - Operation not supported for type 'custom_list'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsUpdateNamedListPartial_404_response'
          description: |2-

            - 'id' value must contain existing named list identifier
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsUpdateNamedListPartial_405_response'
          description: |2-

            - Only PATCH operation supported for the existing TI Lists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Patch TI List.
      tags:
      - named_lists
      x-codegen-request-body-name: body
    put:
      description: |
        Use this method to update the specified Named List object. Note that list type cannot be updated.

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed. Note that lists representing predefined TI feeds cannot be created, updated and deleted. Also use of the field 'items' is discouraged and instead use of new field 'item_described' is suggested as it is possible to add the description/comments to each item in the custom list using this field. In any case, note that use of both the fields 'items' and 'items_described' is not supported and when one of these field is used they must have some value i.e, it cannot be empty.

        Required:
        - name
        - items or items_described
      operationId: named_listsUpdateNamedList
      parameters:
      - description: The Named List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNamedList'
        description: The Named List object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListUpdateResponse'
          description: PUT operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'items' value must contain valid IPv4 addresses or domain names
            - named list of type "dnsm", "threat_insight", "fast_flux", "dga" and "threat_insight_nde" cannot be created
            - list type cannot be updated
            - Either 'items' or 'items_described' field is required
            - 'item' cannot be empty in field items_described
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsMultiListUpdate_404_response'
          description: |2-

            - 'id' value must contain existing named list identifier
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsCreateNamedList_409_response'
          description: |2-

            - 'name' value must be unique among named lists belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Named List.
      tags:
      - named_lists
      x-codegen-request-body-name: body
  /named_lists/{id}/items:
    delete:
      description: |
        Use this method to remove items from a specified Named List object. Note that duplicated items are silently skipped and only new items are appended to the named list. Note that DNSM, TI, Fast Flux and DGA lists cannot be updated. Only Custom List items can be deleted.

        The Custom List Items represent the list of the FQDN or IPv4 or IPv6 addresses to define whitelists and blacklists for additional protection.

        Required:
        - items
      operationId: named_list_itemsDeleteNamedListItems
      parameters:
      - description: The Named List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNamedListItemsDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_list_itemsDeleteNamedListItems_400_response'
          description: |2-

            - 'id' value must be greater than or equal to zero
            - 'items' value must contain either valid domain names or IPv4 or IPv6 or network addresses.
            - 'items' value must contain existing values for a specified named list
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsMultiListUpdate_404_response'
          description: |2-

            - 'id' value must contain existing custom list identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Named List Items.
      tags:
      - named_list_items
      x-codegen-request-body-name: body
    patch:
      description: |
        Use this method to insert ot delete items  for a specified Named List object. Note that duplicated items are silently skipped and only new items are appended to the named list. Note that DNSM, TI, Fast Flux and DGA lists cannot be updated. Only Custom List items can be updated.

        The Custom List Items represent the list of the FQDN or IPv4 addresses to define whitelists and blacklists for additional protection.
      operationId: named_list_itemsNamedListItemsPartialUpdate
      parameters:
      - description: The Named List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNamedListItemsPartialUpdate'
        description: NamedListItemsPartialUpdate object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListItemsPartialUpdateResponse'
          description: PATCH operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_list_itemsNamedListItemsPartialUpdate_400_response'
          description: |2-

            - 'id' value must be greater than or equal to zero
            - 'items' value must contain either valid domain names or IPv4 or network addresses.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsMultiListUpdate_404_response'
          description: |2-

            - 'id' value must contain existing named list identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Partial Update Named List Items.
      tags:
      - named_list_items
      x-codegen-request-body-name: body
    post:
      description: |
        Use this method to update existing items with new ones for a specified Named List object. Note that duplicated items are silently skipped and only new items are appended to the named list. Note that DNSM, TI, Fast Flux and DGA lists cannot be updated. Only Custom List items can be updated.

        The Custom List Items represent the list of the FQDN or IPv4 addresses to define whitelists and blacklists for additional protection.
      operationId: named_list_itemsInsertOrReplaceNamedListItems
      parameters:
      - description: The Named List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNamedListItemsInsertOrUpdate'
        description: NamedListItemsInsertOrUpdate object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListItemsInsertOrUpdateResponse'
          description: POST operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_list_itemsInsertOrReplaceNamedListItems_400_response'
          description: |2-

            - 'id' value must be greater than or equal to zero
            - 'items' value must contain either valid domain names or IPv4 or IPv6 or network addresses.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/named_listsMultiListUpdate_404_response'
          description: |2-

            - 'id' value must contain existing named list identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Insert Named List Items.
      tags:
      - named_list_items
      x-codegen-request-body-name: body
  /named_lists_download:
    get:
      description: |+
        Use this method to download the selected list of named lists in CSV (comma-separate values) format.

      operationId: named_listsListNamedListsCSV
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Ops    |
          | ------------------ | ------ | ---------------- |
          | type               | string | ==, !=           |
          | items              | string | ~, !~            |
          | items_described    | string | ==               |

          Grouping operators (and, or, not, ()) are not supported between different fields.
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be sorted by their\
          \ JSON tags. For a 'flat' resource, the tag name is straightforward. If\
          \ sorting is allowed on non-flat hierarchical resources, the service should\
          \ implement a qualified naming scheme such as dot-qualification to reference\
          \ data down the hierarchy. If a resource does not have the specified tag,\
          \ its value is assumed to be null.)\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names. The sort direction can be specified by a suffix\
          \ separated by whitespace before the tag name. The suffix 'asc' sorts the\
          \ data in ascending order. The suffix 'desc' sorts the data in descending\
          \ order. If no suffix is specified the data is sorted in ascending order.\n\
          \n\t\t\t\t\t\t"
        in: query
        name: _order_by
        schema:
          type: string
      - description: Filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: Sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNamedListCSVListResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Named Lists in CSV format.
      tags:
      - named_lists
  /network_lists:
    delete:
      description: |
        Use this method to delete the Network List objects. Deletion of multiple lists is an all-or-nothing operation (if any of the specified lists can not be deleted then none of the specified lists will be deleted).

        Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of  or IPv6 addresses or blocks.

        Required:
        - ids
      operationId: network_listsDeleteNetworkLists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNetworkListsDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_listsDeleteNetworkLists_400_response'
          description: |2-

            - 'ids' value must be non-empty
            - 'ids' value must contain unique elements
            - 'ids' value must contain values that are greater than or equal to zero
            - network list that is assigned to a security policy cannot be deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_listsDeleteNetworkLists_404_response'
          description: |2-

            - 'ids' value must contain existing network list identifiers
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Network Lists.
      tags:
      - network_lists
      x-codegen-request-body-name: body
    get:
      description: |+
        Use this method to retrieve information on all Network List objects for the account.

        Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of IPv4 or IPv6 addresses or blocks.

      operationId: network_listsListNetworkLists
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name                    | type   | Supported Op                |
          | ----------------------- | ------ | --------------------------- |
          | id                      | int32  | !=, ==, >, <, <=, >=        |
          | policy_id               | int32  | !=, ==, >, <, <=, >=        |
          | name                    | string | !=, ==, ~, !~, >, <, <=, >= |
          | description             | string | !=, ==, ~, !~, >, <, <=, >= |
          | default_security_policy | bool   | !=, ==                      |
          | items                   | string | >=                           |

          In addition grouping operators are supported:

          | Op  | Description          |
          | --- | -------------------- |
          | and | Logical AND          |
          | or  | Logical OR           |
          | not | Logical NOT          |
          | ()  | Groupping Operators  |

          Allowed sets of parameters that can be groupped in one query:

          - id, policy_id, name, description, default_security_policy
          - items

          Example:
          ```
          ?_filter="((name=='net_list1')or(name~'list_b'))and(default_security_policy!='true')"
          ```
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNetworkListMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Network Lists.
      tags:
      - network_lists
    post:
      description: |
        Use this method to create a Network List object.

        Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of IPv4 or IPv6 addresses or blocks.

        Required:
        - name
        - items
      operationId: network_listsCreateNetworkList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNetworkList'
        description: The Network List object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNetworkListCreateResponse'
          description: POST operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'name' value cannot be equal to 'All BloxOne Endpoints (Default)', 'All Networks (Default)', 'All DNS Forwarder Proxies (Default)'
            - 'description' length cannot exceed 256 characters limit
            - 'items' value must not be empty
            - 'items' value must contain valid CIDRs from range [24, 32]
            - CIDRs in 'items' cannot overlap with each other and with existing items for all accounts
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_listsCreateNetworkList_409_response'
          description: |2-

            - 'name' value must be unique among network lists belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Create Network List.
      tags:
      - network_lists
      x-codegen-request-body-name: body
  /network_lists/{id}:
    delete:
      description: |+
        Use this method to delete the Network List object by the specified Network List object id.

        Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of  or IPv6 addresses or blocks.

      operationId: network_listsDeleteSingleNetworkLists
      parameters:
      - description: The Network List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_filtersDeleteSingleApplicationFilters_400_response'
          description: |2-

            - "invalid 'id': value must be greater than or equal to 0"
            - network list that is assigned to a security policy cannot be deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_listsDeleteNetworkLists_404_response'
          description: |2-

            - 'id' value must contain existing network list identifiers
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Network Lists.
      tags:
      - network_lists
    get:
      description: |
        Use this method to retrieve information on the specified Network List object.

        Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of IPv4 or IPv6 addresses or blocks.
      operationId: network_listsReadNetworkList
      parameters:
      - description: The Network List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: The name of the network list.
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNetworkListReadResponse'
          description: GET operation response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_listsDeleteNetworkLists_404_response'
          description: |2-

            - 'id' value must contain existing network list identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Read Network List.
      tags:
      - network_lists
    put:
      description: |
        Use this method to update a specified Network List object.

        Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of IPv4 or IPv6 addresses or blocks.

        Required:
        - name
        - items
      operationId: network_listsUpdateNetworkList
      parameters:
      - description: The Network List object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwNetworkList'
        description: The Network List object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwNetworkListUpdateResponse'
          description: PUT operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_filtersCreateCategoryFilter_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'name' value cannot be equal to 'All BloxOne Endpoints (Default)', 'All Networks (Default)', 'All DNS Forwarder Proxies (Default)'
            - 'description' length cannot exceed 256 characters limit
            - 'items' value must not be empty
            - 'items' value must contain valid CIDRs from range [24, 32]
            - CIDRs in 'items' cannot overlap with each other and with existing items for all accounts
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_listsDeleteNetworkLists_404_response'
          description: |2-

            - 'id' value must contain existing network list identifier
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_listsCreateNetworkList_409_response'
          description: |2-

            - 'name' value must be unique among network lists belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Network List.
      tags:
      - network_lists
      x-codegen-request-body-name: body
  /pop_regions:
    get:
      description: |+
        Use this method to retrieve information on all Point of Presence (PoP) regions availablein the database.

      operationId: pop_regionsListPoPRegions
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Ops    |
          | ------------------ | ------ | ---------------- |
          | region             | string | ==, !=           |
          | location           | string | ~, !~            |

          Grouping operators (and, or, not, ()) are not supported between different fields.
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: Filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: Sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwListPoPRegionsResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List PoP Regions.
      tags:
      - pop_regions
  /pop_regions/{id}:
    get:
      description: |
        Use this method to retrieve information on the specified PoP region object.
      operationId: pop_regionsReadPoPRegion
      parameters:
      - description: The PoP region object identifier
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwReadPoPRegionResponse'
          description: GET operation response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pop_regionsReadPoPRegion_404_response'
          description: |2

            - 'id' value must contain existing PoP region's id
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2

            - Internal server error occurred
      summary: Read PoP Region.
      tags:
      - pop_regions
  /security_policies:
    delete:
      description: |
        Use this method to delete Security Policy objects. Deletion of multiple lists is an all-or-nothing operation (if any of the specified lists can not be deleted then none of the specified lists will be deleted).

        A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.

        Required:
        - ids
      operationId: security_policiesDeleteSecurityPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwSecurityPolicyDeleteRequest'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesDeleteAccessCodes_400_response'
          description: |2-

            - 'ids' value must be non-empty
            - 'ids' value must contain unique elements
            - 'ids' value must contain values that are greater than or equal to zero
            - 'ids' value must contain existing security policy identifiers
            - default security policy cannot be deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Security Policies.
      tags:
      - security_policies
      x-codegen-request-body-name: body
    get:
      description: |+
        Use this method to retrieve information on all Security Policy objects for the account.

        A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.

      operationId: security_policiesListSecurityPolicies
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Op                |
          | ------------------ | ------ | --------------------------- |
          | id                 | int32  | !=, ==, >, <, <=, >=        |
          | name               | string | !=, ==, ~, !~, >, <, <=, >= |
          | description        | string | !=, ==, ~, !~, >, <, <=, >= |
          | is_default         | bool   | !=, ==                      |

          In addition grouping operators are supported:

          | Op  | Description          |
          | --- | -------------------- |
          | and | Logical AND          |
          | or  | Logical OR           |
          | not | Logical NOT          |
          | ()  | Groupping Operators  |

          Example:
          ```
          ?_filter="((name=='sec_policy_a')or(name~'policy_b'))and(is_default!='true')"
          ```
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - in: query
        name: include_access_codes
        schema:
          format: boolean
          type: boolean
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      - description: Filtering by tags.
        in: query
        name: _tfilter
        schema:
          type: string
      - description: Sorting by tags.
        in: query
        name: _torder_by
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwSecurityPolicyMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Security Policies.
      tags:
      - security_policies
    post:
      description: |+
        Use this method to create a Security Policy object. If no rule list is specified, the newly created Security Policy object will create these rules as a copy of default Security Policy rules ("Default Global Policy"). If rule list is provided it must contain at least the complete list of policy rules, including the rules based on all feeds that the account is entitled to. If no network list is specified, networking scope for this policy is empty, thus no action can be performed by this policy. Note that you are not allowed to add DNS Forwarding Proxies and Roaming Device Groups that are already assigned to a Security Policy different from "Default Global Policy", to assign them to this Security Policy object you should remove them from other Security Policy first.

        A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.

        Required:
        - name



      operationId: security_policiesCreateSecurityPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwSecurityPolicy'
        description: The Security Policy object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwSecurityPolicyCreateResponse'
          description: POST operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/security_policiesCreateSecurityPolicy_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'network_lists' must containt existing Network Lists
            - 'dfps' must contain existing DNS Forwarding Proxies
            - 'roaming_device_groups' must contain existing endpoint devices
            - 'network_lists' cannot contain Network Lists that are already assigned to another Security Policy
            - Network Lists for the Default Security Policy cannot be updated
            - 'dfps' cannot contain DNS Forwarding Proxies that are already assigned to another Security Policy
            - DNS Forwarding Proxies for the Default Security Policy cannot be updated
            - 'roaming_device_groups' cannot contain endpoint devices that are already assigned to another Security Policy
            - endpoint devices for the Default Security Policy cannot be updated
            - Threat Feed and TI rules must contain licensed threat feeds and TI lists
            - Threat Feed rules must be unique for the Security Policy
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_404_response'
          description: |2-

            - Threat Feed and TI rules must contain existing threat feeds and TI lists
            - Custom Redirect rules must contain existing Custom Redirect
            - Custom List rules must contain existing Custom List
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/security_policiesCreateSecurityPolicy_409_response'
          description: |2-

            - 'name' value must be unique among security policies belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Create Security Policy.
      tags:
      - security_policies
      x-codegen-request-body-name: body
  /security_policies/{id}:
    delete:
      description: |+
        Use this method to delete Security Policy object by given Security Policy object id.

        A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.

      operationId: security_policiesDeleteSingleSecurityPolicy
      parameters:
      - description: The Security Policy object identifiers.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_filtersDeleteSingleApplicationFilters_400_response'
          description: |2-

            - 'id' value must contain values that are greater than or equal to zero
            - 'id' value must contain existing security policy identifier
            - default security policy cannot be deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Delete Security Policy.
      tags:
      - security_policies
    get:
      description: |
        Use this method to retrieve information on the specified Security Policy object.

        A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.
      operationId: security_policiesReadSecurityPolicy
      parameters:
      - description: The Security Policy object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwSecurityPolicyReadResponse'
          description: GET operation response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/security_policiesReadSecurityPolicy_404_response'
          description: |2-

            - 'id' value must contain existing security policy identifier
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Read Security Policy.
      tags:
      - security_policies
    put:
      description: |
        Use this method to update a specified Network List object. The policy data supplied with the update request must have the complete list of policy rules, including the rules based on all feeds that the account is entitled to. If no network list is specified, networking scope for this policy is empty, thus no action can be performed by this policy. Note that you are not allowed to add DNS Forwarding Proxies and Roaming Device Groups that are already assigned to a Security Policy different from "Default Global Policy", to assign them to this Security Policy object you should remove them from other Security Policy first.

        A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.

        Required:
        - name
        - rules
        - dfps
        - network_lists
        - roaming_device_groups
      operationId: security_policiesUpdateSecurityPolicy
      parameters:
      - description: The Security Policy object identifier.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcfwSecurityPolicy'
        description: The Security Policy object.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwSecurityPolicyUpdateResponse'
          description: PUT operation response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/security_policiesCreateSecurityPolicy_400_response'
          description: |2-

            - 'name' length cannot exceed 256 characters limit
            - 'description' length cannot exceed 256 characters limit
            - 'network_lists' must containt existing Network Lists
            - 'dfps' must contain existing DNS Forwarding Proxies
            - 'roaming_device_groups' must contain existing endpoint devices
            - 'network_lists' cannot contain Network Lists that are already assigned to another Security Policy
            - Network Lists for the Default Security Policy cannot be updated
            - 'dfps' cannot contain DNS Forwarding Proxies that are already assigned to another Security Policy
            - DNS Forwarding Proxies for the Default Security Policy cannot be updated
            - 'roaming_device_groups' cannot contain endpoint devices that are already assigned to another Security Policy
            - endpoint devices for the Default Security Policy cannot be updated
            - Threat Feed and TI rules must contain licensed threat feeds and TI lists
            - Threat Feed rules must be unique for the Security Policy
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesCreateAccessCode_404_response'
          description: |2-

            - 'id' value must contain existing security policy identifier
            - Threat Feed and TI rules must contain existing threat feeds and TI lists
            - Custom Redirect rules must contain existing Custom Redirect
            - Custom List rules must contain existing Custom List
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/security_policiesCreateSecurityPolicy_409_response'
          description: |2-

            - 'name' value must be unique among security policies belonging to the same account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: Update Security Policy.
      tags:
      - security_policies
      x-codegen-request-body-name: body
  /security_policy_rules:
    get:
      description: |+
        Use this method to retrieve information on all Security Policy Rule objects for the account.

        The Security Policy Rule object represents a rule and action that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks.

      operationId: security_policy_rulesListSecurityPolicyRules
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Ops    |
          | ------------------ | ------ | ---------------- |
          | policy_id          | int32  | ==               |
          | list_id            | int32  | ==               |
          | category_filter_id | int32  | ==               |

          Groupping operators (and, or, not, ()) are not supported.
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwSecurityPolicyRuleMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Security Policy Rules.
      tags:
      - security_policy_rules
  /threat_feeds:
    get:
      description: |+
        Use this method to retrieve information on all Threat Feed objects for the account.

        BloxOne Cloud provides predefined threat intelligence feeds based on your subscription. The Plus subscription offers a few more feeds than the Standard subscription. The Advanced subscription offers a few more feeds than the Plus subscription. A threat feed subscription for RPZ updates offers protection against malicious hostnames.

      operationId: threat_feedsListThreatFeeds
      parameters:
      - description: |
          A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

          Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

          You can filter by following fields:

          | Name               | type   | Supported Op                |
          | ------------------ | ------ | --------------------------- |
          | name               | string | !=, ==, ~, !~, >, <, <=, >= |

          In addition grouping operators are supported:

          | Op  | Description          |
          | --- | -------------------- |
          | and | Logical AND          |
          | or  | Logical OR           |
          | not | Logical NOT          |
          | ()  | Grouping Operators  |

          Example:
          ```
          ?_filter="((name=='AntiMalware')or(name~'FarSightNOD'))"
          ```
        in: query
        name: _filter
        schema:
          type: string
      - description: "\n\nA collection of response resources can be transformed by\
          \ specifying a set of JSON tags to be returned. For a “flat” resource, the\
          \ tag name is straightforward. If field selection is allowed on non-flat\
          \ hierarchical resources, the service should implement a qualified naming\
          \ scheme such as dot-qualification to reference data down the hierarchy.\
          \ If a resource does not have the specified tag, the tag does not appear\
          \ in the output resource.\n\nSpecify this parameter as a comma-separated\
          \ list of JSON tag names.\n\n\t\t\t\t\t\t"
        in: query
        name: _fields
        schema:
          type: string
      - description: "\n\nThe integer index (zero-origin) of the offset into a collection\
          \ of resources. If omitted or null the value is assumed to be '0'.\n\n\t\
          \t\t\t\t\t\t"
        in: query
        name: _offset
        schema:
          type: integer
      - description: "\n\nThe integer number of resources to be returned in the response.\
          \ The service may impose maximum value. If omitted the service may impose\
          \ a default value.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _limit
        schema:
          type: integer
      - description: "\n\nThe service-defined string used to identify a page of resources.\
          \ A null value indicates the first page.\n\n\t\t\t\t\t\t\t"
        in: query
        name: _page_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcfwThreatFeedMultiResponse'
          description: GET operation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_codesListAccessCodes_500_response'
          description: |2-

            - Internal server error occurred
      summary: List Threat Feeds.
      tags:
      - threat_feeds
components:
  schemas:
    NetAddrDfpAssignmentScopeType:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - ADDRESS_BLOCK
      - SUBNET
      - ADDRESS
      - RANGE
      type: string
    ThreatFeedSource:
      default: Infoblox
      enum:
      - Infoblox
      - Custom
      type: string
    atcfwAccessCode:
      example:
        created_time: 2000-01-23T04:56:07.000+00:00
        updated_time: 2000-01-23T04:56:07.000+00:00
        access_key: access_key
        name: name
        description: description
        expiration: 2000-01-23T04:56:07.000+00:00
        rules:
        - redirect_name: redirect_name
          data: data
          action: action
          description: description
          type: type
        - redirect_name: redirect_name
          data: data
          action: action
          description: description
          type: type
        policy_ids:
        - 12345
        - 53215
        activation: 2000-01-23T04:56:07.000+00:00
      properties:
        access_key:
          description: Auto generated unique Bypass Code value
          type: string
        activation:
          description: The time when the Bypass Code object was activated.
          format: date-time
          type: string
        created_time:
          description: The time when the Bypass Code object was created.
          format: date-time
          readOnly: true
          type: string
        description:
          type: string
        expiration:
          description: The time when the Bypass Code object was expired.
          format: date-time
          type: string
        name:
          description: The name of Bypass Code
          type: string
        policy_ids:
          description: The list of SecurityPolicy object identifiers.
          example:
          - 12345
          - 53215
          items:
            format: int32
            type: integer
          type: array
        rules:
          description: The list of selected security rules
          items:
            $ref: '#/components/schemas/atcfwAccessCodeRule'
          type: array
        updated_time:
          description: The time when the Bypass Code object was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    atcfwAccessCodeCreateResponse:
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          access_key: access_key
          name: name
          description: description
          expiration: 2000-01-23T04:56:07.000+00:00
          rules:
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          policy_ids:
          - 12345
          - 53215
          activation: 2000-01-23T04:56:07.000+00:00
      properties:
        results:
          $ref: '#/components/schemas/atcfwAccessCode'
      type: object
    atcfwAccessCodeDeleteRequest:
      properties:
        ids:
          description: The Bypass Code identifier.
          items:
            type: string
          type: array
      type: object
    atcfwAccessCodeMultiResponse:
      example:
        results:
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          access_key: access_key
          name: name
          description: description
          expiration: 2000-01-23T04:56:07.000+00:00
          rules:
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          policy_ids:
          - 12345
          - 53215
          activation: 2000-01-23T04:56:07.000+00:00
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          access_key: access_key
          name: name
          description: description
          expiration: 2000-01-23T04:56:07.000+00:00
          rules:
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          policy_ids:
          - 12345
          - 53215
          activation: 2000-01-23T04:56:07.000+00:00
      properties:
        results:
          description: The list of Bypass Code objects.
          items:
            $ref: '#/components/schemas/atcfwAccessCode'
          type: array
      type: object
    atcfwAccessCodeReadResponse:
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          access_key: access_key
          name: name
          description: description
          expiration: 2000-01-23T04:56:07.000+00:00
          rules:
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          policy_ids:
          - 12345
          - 53215
          activation: 2000-01-23T04:56:07.000+00:00
      properties:
        results:
          $ref: '#/components/schemas/atcfwAccessCode'
      type: object
    atcfwAccessCodeRule:
      example:
        redirect_name: redirect_name
        data: data
        action: action
        description: description
        type: type
      properties:
        action:
          type: string
        data:
          type: string
        description:
          type: string
        redirect_name:
          type: string
        type:
          type: string
      type: object
    atcfwAccessCodeUpdateResponse:
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          access_key: access_key
          name: name
          description: description
          expiration: 2000-01-23T04:56:07.000+00:00
          rules:
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          - redirect_name: redirect_name
            data: data
            action: action
            description: description
            type: type
          policy_ids:
          - 12345
          - 53215
          activation: 2000-01-23T04:56:07.000+00:00
      properties:
        results:
          $ref: '#/components/schemas/atcfwAccessCode'
      type: object
    atcfwAppApproval:
      example:
        app_name: app_name
        status: status
      properties:
        app_name:
          description: "The name of the application, should be unique and is used\
            \ as Application Identifier"
          type: string
        status:
          type: string
      type: object
    atcfwAppApprovalMultiResponse:
      example:
        results:
        - app_name: app_name
          status: status
        - app_name: app_name
          status: status
      properties:
        results:
          items:
            $ref: '#/components/schemas/atcfwAppApproval'
          type: array
      type: object
    atcfwAppApprovalRemovalRequest:
      properties:
        app_name:
          type: string
      type: object
    atcfwAppApprovalsReplaceRequest:
      properties:
        approvals:
          items:
            $ref: '#/components/schemas/atcfwAppApproval'
          type: array
        fields:
          $ref: '#/components/schemas/protobufFieldMask'
      type: object
    atcfwAppApprovalsUpdateRequest:
      properties:
        fields:
          $ref: '#/components/schemas/protobufFieldMask'
        inserted_approvals:
          items:
            $ref: '#/components/schemas/atcfwAppApproval'
          type: array
        removed_approvals:
          items:
            $ref: '#/components/schemas/atcfwAppApprovalRemovalRequest'
          type: array
      type: object
    atcfwApplicationCriterion:
      example:
        name: name
        id: id
        category: category
        subcategory: subcategory
      properties:
        category:
          type: string
        id:
          readOnly: true
          type: string
        name:
          description: |-
            Name for the application. Since the name of application is unique it may
            be used as alternate key for the application. The 'name' is used for
            import-export workflow and should be resolved to the 'id' before continue
            processing Create/Update operations.
          type: string
        subcategory:
          type: string
      type: object
    atcfwApplicationFilter:
      description: |-
        The Application Filter object.

        Application filters are content application rules that BloxOne Cloud uses to detect and filter specific internet content.
      example:
        created_time: 2000-01-23T04:56:07.000+00:00
        updated_time: 2000-01-23T04:56:07.000+00:00
        readonly: true
        criteria:
        - name: name
          id: id
          category: category
          subcategory: subcategory
        - name: name
          id: id
          category: category
          subcategory: subcategory
        name: application_filter_a
        policies:
        - security_policy_a
        - security_policy_b
        description: Application Filter A Description
        id: 0
        tags: "{}"
      properties:
        created_time:
          description: The time when this Application Filter object was created.
          format: date-time
          readOnly: true
          type: string
        criteria:
          description: The array of key-value pairs specifying criteria for the search.
          items:
            $ref: '#/components/schemas/atcfwApplicationCriterion'
          type: array
        description:
          description: The brief description for the application filter.
          example: Application Filter A Description
          type: string
        id:
          description: The Application Filter object identifier.
          format: int32
          readOnly: true
          type: integer
        name:
          description: The name of the application filter.
          example: application_filter_a
          type: string
        policies:
          description: The list of security policy names with which the application
            filter is associated.
          example:
          - security_policy_a
          - security_policy_b
          items:
            type: string
          readOnly: true
          type: array
        readonly:
          description: True if it is a predefined application filter
          format: boolean
          type: boolean
        tags:
          additionalProperties: false
          description: Enables tag support for resource where tags attribute contains
            user-defined key value pairs
          type: object
        updated_time:
          description: The time when this Application Filter object was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    atcfwApplicationFilterCreateResponse:
      description: The Application Filter create response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          readonly: true
          criteria:
          - name: name
            id: id
            category: category
            subcategory: subcategory
          - name: name
            id: id
            category: category
            subcategory: subcategory
          name: application_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Application Filter A Description
          id: 0
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwApplicationFilter'
      type: object
    atcfwApplicationFilterMultiResponse:
      description: The Application Filter list response.
      example:
        results:
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          readonly: true
          criteria:
          - name: name
            id: id
            category: category
            subcategory: subcategory
          - name: name
            id: id
            category: category
            subcategory: subcategory
          name: application_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Application Filter A Description
          id: 0
          tags: "{}"
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          readonly: true
          criteria:
          - name: name
            id: id
            category: category
            subcategory: subcategory
          - name: name
            id: id
            category: category
            subcategory: subcategory
          name: application_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Application Filter A Description
          id: 0
          tags: "{}"
      properties:
        results:
          description: The list of Application Filter objects.
          items:
            $ref: '#/components/schemas/atcfwApplicationFilter'
          type: array
      type: object
    atcfwApplicationFilterReadResponse:
      description: The Application Filter read response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          readonly: true
          criteria:
          - name: name
            id: id
            category: category
            subcategory: subcategory
          - name: name
            id: id
            category: category
            subcategory: subcategory
          name: application_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Application Filter A Description
          id: 0
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwApplicationFilter'
      type: object
    atcfwApplicationFilterUpdateResponse:
      description: The Application Filter update response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          readonly: true
          criteria:
          - name: name
            id: id
            category: category
            subcategory: subcategory
          - name: name
            id: id
            category: category
            subcategory: subcategory
          name: application_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Application Filter A Description
          id: 0
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwApplicationFilter'
      type: object
    atcfwApplicationFiltersDeleteRequest:
      description: The Application Filter delete request.
      properties:
        ids:
          description: The list of Application Filter object identifiers.
          example:
          - 12345
          - 53215
          items:
            format: int32
            type: integer
          type: array
      type: object
    atcfwCategoryFilter:
      description: |-
        The Category Filter object.

        Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.
      example:
        created_time: 2000-01-23T04:56:07.000+00:00
        updated_time: 2000-01-23T04:56:07.000+00:00
        name: category_filter_a
        policies:
        - security_policy_a
        - security_policy_b
        description: Category Filter A Description
        categories:
        - Web Ads
        - Technical Information
        id: 0
        tags: "{}"
      properties:
        categories:
          description: The list of content category names that falls into this category
            filter.
          example:
          - Web Ads
          - Technical Information
          items:
            type: string
          type: array
        created_time:
          description: The time when this Category Filter object was created.
          format: date-time
          readOnly: true
          type: string
        description:
          description: The brief description for the category filter.
          example: Category Filter A Description
          type: string
        id:
          description: The Category Filter object identifier.
          format: int32
          readOnly: true
          type: integer
        name:
          description: The name of the category filter.
          example: category_filter_a
          type: string
        policies:
          description: The list of security policy names with which the category filter
            is associated.
          example:
          - security_policy_a
          - security_policy_b
          items:
            type: string
          readOnly: true
          type: array
        tags:
          additionalProperties: false
          description: Enables tag support for resource where tags attribute contains
            user-defined key value pairs
          type: object
        updated_time:
          description: The time when this Category Filter object was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    atcfwCategoryFilterCreateResponse:
      description: The Category Filter create response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: category_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Category Filter A Description
          categories:
          - Web Ads
          - Technical Information
          id: 0
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwCategoryFilter'
      type: object
    atcfwCategoryFilterMultiResponse:
      description: The Category Filter list response.
      example:
        results:
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: category_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Category Filter A Description
          categories:
          - Web Ads
          - Technical Information
          id: 0
          tags: "{}"
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: category_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Category Filter A Description
          categories:
          - Web Ads
          - Technical Information
          id: 0
          tags: "{}"
      properties:
        results:
          description: The list of Category Filter objects.
          items:
            $ref: '#/components/schemas/atcfwCategoryFilter'
          type: array
      type: object
    atcfwCategoryFilterReadResponse:
      description: The Category Filter read response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: category_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Category Filter A Description
          categories:
          - Web Ads
          - Technical Information
          id: 0
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwCategoryFilter'
      type: object
    atcfwCategoryFilterUpdateResponse:
      description: The Category Filter update response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: category_filter_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Category Filter A Description
          categories:
          - Web Ads
          - Technical Information
          id: 0
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwCategoryFilter'
      type: object
    atcfwCategoryFiltersDeleteRequest:
      description: The Category Filter delete request.
      properties:
        ids:
          description: The list of Category Filter object identifiers.
          example:
          - 12345
          - 53215
          items:
            format: int32
            type: integer
          type: array
      type: object
    atcfwContentCategory:
      description: |-
        The Content Category object.

        The Content Category object represents a specific internet content and used to configure category filters. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many categories and sub-categories as you need.
      example:
        category_name: Weapons
        category_code: 155
        functional_group: Mature/Violent
      properties:
        category_code:
          description: The category code.
          example: 155
          format: int32
          type: integer
        category_name:
          description: The name of the category.
          example: Weapons
          type: string
        functional_group:
          description: The functional group name of the category.
          example: Mature/Violent
          type: string
      type: object
    atcfwContentCategoryMultiResponse:
      description: The Content Category list response.
      example:
        results:
        - category_name: Weapons
          category_code: 155
          functional_group: Mature/Violent
        - category_name: Weapons
          category_code: 155
          functional_group: Mature/Violent
      properties:
        results:
          description: The list of Content Category objects.
          items:
            $ref: '#/components/schemas/atcfwContentCategory'
          type: array
      type: object
    atcfwInternalDomains:
      description: |-
        The Internal Domain List object.

        The internal domain list is a transport object for reporting gathering internal domains. This feature allows users to configure bypass lists for specific DFP and ATEP groups. Bypass Lists provides the users to create ‘Internal Domains List’ objects with a name, description, and a list of domains/ip/cidr. These lists are referenced by and attached to DFP, and ATEP groups.
        Once attached to DFP, dfp configuration endpoints will return the values under all associated domain lists as domains.

        Once attached to ATEP, atep login endpoint will return the values under all associated lists as bypass_list.
      example:
        created_time: 2000-01-23T04:56:07.000+00:00
        updated_time: 2000-01-23T04:56:07.000+00:00
        name: internal_domains_lists
        description: Internal Domain lists A description
        id: 0
        internal_domains:
        - example.somedomain.com
        - 187.13.5.64
        is_default: false
        tags: "{}"
      properties:
        created_time:
          description: The time when this Internal Domain lists object was created.
          format: date-time
          readOnly: true
          type: string
        description:
          description: The brief description for the internal domain lists .
          example: Internal Domain lists A description
          type: string
        id:
          description: The Internal Domain object identifier.
          format: int32
          readOnly: true
          type: integer
        internal_domains:
          description: "The list of internal domains, should be unique to each other\
            \ and has to be read-only from the API level."
          example:
          - example.somedomain.com
          - 187.13.5.64
          items:
            type: string
          type: array
        is_default:
          description: True if name is 'Default Bypass Domains/CIDRs' otherwise false.
          example: false
          format: boolean
          type: boolean
        name:
          description: The name of the internal domain lists.
          example: internal_domains_lists
          type: string
        tags:
          additionalProperties: false
          description: Enables tag support for resource where tags attribute contains
            user-defined key value pairs
          type: object
        updated_time:
          description: The time when this Internal domain lists object was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    atcfwInternalDomainsCreateResponse:
      description: The Internal Domains create response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: internal_domains_lists
          description: Internal Domain lists A description
          id: 0
          internal_domains:
          - example.somedomain.com
          - 187.13.5.64
          is_default: false
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwInternalDomains'
      type: object
    atcfwInternalDomainsDeleteRequest:
      description: The Internal Domains delete request.
      properties:
        ids:
          description: The list of InternalDomains object identifiers.
          example:
          - 12345
          - 53215
          items:
            format: int32
            type: integer
          type: array
      type: object
    atcfwInternalDomainsItems:
      properties:
        deleted_items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          example:
          - description: Item 1 Description
            item: example2.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.10/32
          - description: Item 3 Description
            item: 193.56.2.9
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
        id:
          description: The Internal Domain List object identifier.
          format: int32
          readOnly: true
          type: integer
        inserted_items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          example:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 193.56.2.11
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
      type: object
    atcfwInternalDomainsItemsPartialResponse:
      description: The Internal Domains patch response.
      type: object
    atcfwInternalDomainsMultiResponse:
      description: The Internal domains list response.
      example:
        results:
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: internal_domains_lists
          description: Internal Domain lists A description
          id: 0
          internal_domains:
          - example.somedomain.com
          - 187.13.5.64
          is_default: false
          tags: "{}"
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: internal_domains_lists
          description: Internal Domain lists A description
          id: 0
          internal_domains:
          - example.somedomain.com
          - 187.13.5.64
          is_default: false
          tags: "{}"
      properties:
        results:
          description: The list of Internal Domains objects.
          items:
            $ref: '#/components/schemas/atcfwInternalDomains'
          type: array
      type: object
    atcfwInternalDomainsReadResponse:
      description: The Internal Domains read response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: internal_domains_lists
          description: Internal Domain lists A description
          id: 0
          internal_domains:
          - example.somedomain.com
          - 187.13.5.64
          is_default: false
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwInternalDomains'
      type: object
    atcfwInternalDomainsUpdateResponse:
      description: The Internal domains update response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          name: internal_domains_lists
          description: Internal Domain lists A description
          id: 0
          internal_domains:
          - example.somedomain.com
          - 187.13.5.64
          is_default: false
          tags: "{}"
      properties:
        results:
          $ref: '#/components/schemas/atcfwInternalDomains'
      type: object
    atcfwItemStructs:
      description: The Items Structure which contains the item and its description
      properties:
        description:
          description: The description of the item
          example: Item A description
          type: string
        item:
          description: The data of the Item
          example: example1.somdomain.com
          type: string
      type: object
    atcfwListPoPRegionsResponse:
      example:
        total_result_count: 6
        results:
        - addresses:
          - 192.168.1.1
          location: N. Virginia
          id: 0
          region: us-east-1
        - addresses:
          - 192.168.1.1
          location: N. Virginia
          id: 0
          region: us-east-1
      properties:
        results:
          items:
            $ref: '#/components/schemas/atcfwPoPRegion'
          type: array
        total_result_count:
          format: int32
          type: integer
      type: object
    atcfwListSeverityLevels:
      description: The Payload for Patch Operation to update Threat/Confidence Levels
        and Tags in TI List
      properties:
        confidence_level:
          description: "The confidence level for a TI list. The possible values are\
            \ [LOW\", \"MEDIUM\", \"HIGH\"]"
          example: LOW
          type: string
        id:
          description: The Named List object identifier.
          format: int32
          readOnly: true
          type: integer
        tags:
          additionalProperties: false
          description: Enables tag support for resource where tags attribute contains
            user-defined key value pairs
          type: object
        threat_level:
          description: "The threat level for a TI list. The possible values are [\"\
            INFO\", \"LOW\", \"MEDIUM\", \"HIGH\"]"
          example: INFO
          type: string
      type: object
    atcfwMultiListUpdate:
      properties:
        ids:
          description: The Named List object identifier.
          example:
          - 1
          - 2
          items:
            format: int32
            type: integer
          type: array
        inserted_items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          example:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          - description: Item 4 Description
            item: 193.56.2.12
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
      type: object
    atcfwMultiListUpdateResponse:
      type: object
    atcfwNamedList:
      description: |-
        The Named List object.

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed.

        Note that lists representing predefined TI feeds cannot be created, updated and deleted.
      example:
        item_count: 24567
        created_time: 2000-01-23T04:56:07.000+00:00
        threat_level: INFO
        updated_time: 2000-01-23T04:56:07.000+00:00
        confidence_level: LOW
        policies:
        - security_policy_a
        - security_policy_b
        description: Named List A Description
        items_described:
        - description: Item 1 Description
          item: example1.somedomain.com
        - description: Item 2 Description
          item: 193.56.2.11/32
        - description: Item 3 Description
          item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
        type: custom_list
        tags: "{}"
        name: named_list_a
        id: 0
        items:
        - example1.somedomain.com
        - 193.56.2.11/32
        - 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
      properties:
        confidence_level:
          description: "The confidence level for a custom list. The possible values\
            \ are [\"LOW\", \"MEDIUM\", \"HIGH\"]"
          example: LOW
          type: string
        created_time:
          description: The time when this Named List object was created.
          format: date-time
          readOnly: true
          type: string
        description:
          description: The brief description for the named list.
          example: Named List A Description
          type: string
        id:
          description: The Named List object identifier.
          format: int32
          readOnly: true
          type: integer
        item_count:
          description: The number of items in this named list.
          example: 24567
          format: int32
          readOnly: true
          type: integer
        items:
          description: The list of the FQDN or IPv4/IPv6 CIDRs to define whitelists
            and blacklists for additional protection.
          example:
          - example1.somedomain.com
          - 193.56.2.11/32
          - 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          items:
            type: string
          type: array
        items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          example:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
        name:
          description: The name of the named list.
          example: named_list_a
          type: string
        policies:
          description: The list of the security policy names with which the named
            list is associated.
          example:
          - security_policy_a
          - security_policy_b
          items:
            type: string
          type: array
        tags:
          additionalProperties: false
          description: Enables tag support for resource where tags attribute contains
            user-defined key value pairs
          type: object
        threat_level:
          description: "The threat level for a custom list. The possible values are\
            \ [\"INFO\", \"LOW\", \"MEDIUM\", \"HIGH\"]"
          example: INFO
          type: string
        type:
          description: "The type of the named list, that can be \"custom_list\", \"\
            threat_insight\", \"fast_flux\", \"dga\", \"dnsm\", \"threat_insight_nde\"\
            , \"default_allow\", \"default_block\" or \"threat_insight_nde\"."
          enum:
          - custom_list
          - threat_insight
          - fast_flux
          - dga
          - dnsm
          - threat_insight_nde
          - default_allow
          - default_block
          example: custom_list
          type: string
        updated_time:
          description: The time when this Named List object was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    atcfwNamedListCSVListResponse:
      description: The Named List CSV list response
      example:
        results:
        - results
        - results
      properties:
        results:
          description: Named Lists for csv file
          items:
            type: string
          type: array
      type: object
    atcfwNamedListCreateResponse:
      description: The Named List create response.
      example:
        results:
          item_count: 24567
          created_time: 2000-01-23T04:56:07.000+00:00
          threat_level: INFO
          updated_time: 2000-01-23T04:56:07.000+00:00
          confidence_level: LOW
          policies:
          - security_policy_a
          - security_policy_b
          description: Named List A Description
          items_described:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          type: custom_list
          tags: "{}"
          name: named_list_a
          id: 0
          items:
          - example1.somedomain.com
          - 193.56.2.11/32
          - 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
      properties:
        results:
          $ref: '#/components/schemas/atcfwNamedList'
      type: object
    atcfwNamedListItemsDeleteRequest:
      description: The Named List Items delete request.
      properties:
        id:
          description: The Named List object identifier.
          format: int32
          readOnly: true
          type: integer
        items:
          description: The list of the FQDN or IPv4/IPv6 addresses or IPv4/IPv6 CIDRs
            to define whitelists and blacklists for additional protection.
          example:
          - example1.somedomain.com
          - 193.56.2.11
          - 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1
          - 34.2.176.0/24
          - 2001:db8:abcd:0012::0/64
          items:
            type: string
          type: array
        items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          example:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          - description: Item 4 Description
            item: 193.56.2.11
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
      type: object
    atcfwNamedListItemsInsertOrUpdate:
      properties:
        id:
          description: The Named List object identifier.
          format: int32
          readOnly: true
          type: integer
        items:
          description: The list of the FQDN or IPv4/IPv6 addresses or IPv4/IPv6 CIDRs
            to define whitelists and blacklists for additional protection.
          example:
          - example1.somedomain.com
          - 193.56.2.11
          - 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1
          - 34.2.176.0/24
          - 2001:db8:abcd:0012::0/64
          items:
            type: string
          type: array
        items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
      type: object
    atcfwNamedListItemsInsertOrUpdateResponse:
      description: The Named List Items create or update response.
      example:
        success:
          code: UPDATED
          status: 201
      properties:
        success:
          $ref: '#/components/schemas/atcfwNamedListItemsInsertOrUpdateResponse_success'
      type: object
    atcfwNamedListItemsPartialUpdate:
      properties:
        deleted_items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          example:
          - description: Item 1 Description
            item: example2.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.10/32
          - description: Item 3 Description
            item: 2000:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          - description: Item 4 Description
            item: 193.56.2.9
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
        id:
          description: The Named List object identifier.
          format: int32
          readOnly: true
          type: integer
        inserted_items_described:
          description: The List of ItemStructs structure which contains the item and
            its description
          example:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          - description: Item 4 Description
            item: 193.56.2.11
          items:
            $ref: '#/components/schemas/atcfwItemStructs'
          type: array
      type: object
    atcfwNamedListItemsPartialUpdateResponse:
      description: The Named List Items patch response.
      type: object
    atcfwNamedListRead:
      description: |-
        The Named List object.

        The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed. Note that lists representing predefined TI feeds cannot be created, updated and deleted.
      example:
        item_count: 24567
        created_time: 2000-01-23T04:56:07.000+00:00
        threat_level: INFO
        updated_time: 2000-01-23T04:56:07.000+00:00
        confidence_level: LOW
        name: named_list_a
        policies:
        - security_policy_a
        - security_policy_b
        description: Named List A Description
        id: 0
        type: custom_list
        tags: "{}"
      properties:
        confidence_level:
          description: "The confidence level for a custom list. The possible values\
            \ are [\"LOW\", \"MEDIUM\", \"HIGH\"]"
          example: LOW
          readOnly: true
          type: string
        created_time:
          description: The time when this Named List object was created.
          format: date-time
          readOnly: true
          type: string
        description:
          description: The brief description for the named list.
          example: Named List A Description
          readOnly: true
          type: string
        id:
          description: The Named List object identifier.
          format: int32
          readOnly: true
          type: integer
        item_count:
          description: The number of items in this named list.
          example: 24567
          format: int32
          readOnly: true
          type: integer
        name:
          description: The name of the named list.
          example: named_list_a
          readOnly: true
          type: string
        policies:
          description: The list of the security policy names with which the named
            list is associated.
          example:
          - security_policy_a
          - security_policy_b
          items:
            type: string
          readOnly: true
          type: array
        tags:
          additionalProperties: false
          description: Tags associated with this Named List
          type: object
        threat_level:
          description: "The threat level for a custom list. The possible values are\
            \ [\"INFO\", \"LOW\", \"MEDIUM\", \"HIGH\"]"
          example: INFO
          readOnly: true
          type: string
        type:
          description: "The type of the named list, that can be \"custom_list\", \"\
            threat_insight\", \"fast_flux\", \"dga\", \"dnsm\", \"threat_insight_nde\"\
            , \"default_allow\", \"default_block\"."
          enum:
          - custom_list
          - threat_insight
          - fast_flux
          - dga
          - dnsm
          - threat_insight_nde
          - default_allow
          - default_block
          example: custom_list
          readOnly: true
          type: string
        updated_time:
          description: The time when this Named List object was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    atcfwNamedListReadMultiResponse:
      description: The Named List list response.
      example:
        results:
        - item_count: 24567
          created_time: 2000-01-23T04:56:07.000+00:00
          threat_level: INFO
          updated_time: 2000-01-23T04:56:07.000+00:00
          confidence_level: LOW
          name: named_list_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Named List A Description
          id: 0
          type: custom_list
          tags: "{}"
        - item_count: 24567
          created_time: 2000-01-23T04:56:07.000+00:00
          threat_level: INFO
          updated_time: 2000-01-23T04:56:07.000+00:00
          confidence_level: LOW
          name: named_list_a
          policies:
          - security_policy_a
          - security_policy_b
          description: Named List A Description
          id: 0
          type: custom_list
          tags: "{}"
      properties:
        results:
          description: The list of Named List objects.
          items:
            $ref: '#/components/schemas/atcfwNamedListRead'
          type: array
      type: object
    atcfwNamedListReadResponse:
      description: The Named List read response.
      example:
        results:
          item_count: 24567
          created_time: 2000-01-23T04:56:07.000+00:00
          threat_level: INFO
          updated_time: 2000-01-23T04:56:07.000+00:00
          confidence_level: LOW
          policies:
          - security_policy_a
          - security_policy_b
          description: Named List A Description
          items_described:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          type: custom_list
          tags: "{}"
          name: named_list_a
          id: 0
          items:
          - example1.somedomain.com
          - 193.56.2.11/32
          - 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
      properties:
        results:
          $ref: '#/components/schemas/atcfwNamedList'
      type: object
    atcfwNamedListUpdateResponse:
      description: The Named List update response.
      example:
        results:
          item_count: 24567
          created_time: 2000-01-23T04:56:07.000+00:00
          threat_level: INFO
          updated_time: 2000-01-23T04:56:07.000+00:00
          confidence_level: LOW
          policies:
          - security_policy_a
          - security_policy_b
          description: Named List A Description
          items_described:
          - description: Item 1 Description
            item: example1.somedomain.com
          - description: Item 2 Description
            item: 193.56.2.11/32
          - description: Item 3 Description
            item: 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
          type: custom_list
          tags: "{}"
          name: named_list_a
          id: 0
          items:
          - example1.somedomain.com
          - 193.56.2.11/32
          - 2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128
      properties:
        results:
          $ref: '#/components/schemas/atcfwNamedList'
      type: object
    atcfwNamedListsDeleteRequest:
      description: The Named List delete request.
      properties:
        ids:
          description: The list of Named List object identifiers.
          example:
          - 12345
          - 53215
          items:
            format: int32
            type: integer
          type: array
      type: object
    atcfwNetAddrDfpAssignment:
      description: "Scoped DFP assignment to a policy, scoped via network address\
        \ (CIDR)"
      example:
        external_scope_id: external_scope_id
        ip_space_id: ip_space_id
        dfp_ids:
        - 6
        - 6
        addr_net: addr_net
        start: start
        dfp_service_ids:
        - dfp_service_ids
        - dfp_service_ids
        end: end
        host_id: host_id
        scope_type: null
      properties:
        addr_net:
          description: network address in IPv4 CIDR (address/bitmask length) string
            format
          type: string
        dfp_ids:
          description: The list of identifiers of DFPs that have association with
            this scope.
          items:
            format: int32
            type: integer
          readOnly: true
          type: array
        dfp_service_ids:
          items:
            type: string
          readOnly: true
          type: array
        end:
          type: string
        external_scope_id:
          description: "external scope ID, UUID"
          type: string
        host_id:
          description: "Host reference, UUID"
          type: string
        ip_space_id:
          description: "IPSpace reference, UUID"
          type: string
        scope_type:
          $ref: '#/components/schemas/NetAddrDfpAssignmentScopeType'
        start:
          description: Start and end pair of addresses used for range scope type
          type: string
      type: object
    atcfwNetworkList:
      description: |-
        The Network List object.

        Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of IPv4 or IPv6 addresses or blocks.
      example:
        created_time: 2000-01-23T04:56:07.000+00:00
        updated_time: 2000-01-23T04:56:07.000+00:00
        policy_id: 56321
        name: network_list_a
        description: Network List A Description
        id: 0
        items:
        - 156.2.3.0/24
        - 98.36.1.4/31
        - 2001:db8:1::/48
        - 2001:db8::2/128
      properties:
        created_time:
          description: The time when this Network List object was created.
          format: date-time
          readOnly: true
          type: string
        description:
          description: The brief description for the network list.
          example: Network List A Description
          type: string
        id:
          description: The Network List object identifier.
          format: int32
          readOnly: true
          type: integer
        items:
          description: The list of networks' CIDRs that are subject for malicious
            attacks protection.
          example:
          - 156.2.3.0/24
          - 98.36.1.4/31
          - 2001:db8:1::/48
          - 2001:db8::2/128
          items:
            type: string
          type: array
        name:
          description: The name of the network list.
          example: network_list_a
          type: string
        policy_id:
          description: The identifier of the security policy with which the network
            list is associated.
          example: 56321
          format: int32
          readOnly: true
          type: integer
        updated_time:
          description: The time when this Network List object was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    atcfwNetworkListCreateResponse:
      description: The Network List create response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          policy_id: 56321
          name: network_list_a
          description: Network List A Description
          id: 0
          items:
          - 156.2.3.0/24
          - 98.36.1.4/31
          - 2001:db8:1::/48
          - 2001:db8::2/128
      properties:
        results:
          $ref: '#/components/schemas/atcfwNetworkList'
      type: object
    atcfwNetworkListMultiResponse:
      description: The Network List list response.
      example:
        results:
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          policy_id: 56321
          name: network_list_a
          description: Network List A Description
          id: 0
          items:
          - 156.2.3.0/24
          - 98.36.1.4/31
          - 2001:db8:1::/48
          - 2001:db8::2/128
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          policy_id: 56321
          name: network_list_a
          description: Network List A Description
          id: 0
          items:
          - 156.2.3.0/24
          - 98.36.1.4/31
          - 2001:db8:1::/48
          - 2001:db8::2/128
      properties:
        results:
          description: The list of Network List objects.
          items:
            $ref: '#/components/schemas/atcfwNetworkList'
          type: array
      type: object
    atcfwNetworkListReadResponse:
      description: The Network List read response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          policy_id: 56321
          name: network_list_a
          description: Network List A Description
          id: 0
          items:
          - 156.2.3.0/24
          - 98.36.1.4/31
          - 2001:db8:1::/48
          - 2001:db8::2/128
      properties:
        results:
          $ref: '#/components/schemas/atcfwNetworkList'
      type: object
    atcfwNetworkListUpdateResponse:
      description: The Network List update response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          policy_id: 56321
          name: network_list_a
          description: Network List A Description
          id: 0
          items:
          - 156.2.3.0/24
          - 98.36.1.4/31
          - 2001:db8:1::/48
          - 2001:db8::2/128
      properties:
        results:
          $ref: '#/components/schemas/atcfwNetworkList'
      type: object
    atcfwNetworkListsDeleteRequest:
      description: The Network List delete request.
      properties:
        ids:
          description: The list of Network List object identifiers.
          example:
          - 12345
          - 53215
          items:
            format: int32
            type: integer
          type: array
      type: object
    atcfwPoPRegion:
      description: PoPRegion message for a Point of Presence (PoP) region
      example:
        addresses:
        - 192.168.1.1
        location: N. Virginia
        id: 0
        region: us-east-1
      properties:
        addresses:
          description: PoP Region's IP addresses
          example:
          - 192.168.1.1
          items:
            type: string
          type: array
        id:
          description: "The PoP Region's serial, unique ID"
          format: int32
          readOnly: true
          type: integer
        location:
          description: PoP Region's location
          example: N. Virginia
          type: string
        region:
          description: PoP Region's name
          example: us-east-1
          type: string
      type: object
    atcfwPolicyScopeTags:
      description: Network Scope object which is used for indirect associations based
        on tags
      type: object
    atcfwReadPoPRegionResponse:
      example:
        result:
          addresses:
          - 192.168.1.1
          location: N. Virginia
          id: 0
          region: us-east-1
      properties:
        result:
          $ref: '#/components/schemas/atcfwPoPRegion'
      type: object
    atcfwRuleTags:
      description: |-
        The Rule Tag object.

        The Rule Tag object is used for indirect rules associations based on tags
      type: object
    atcfwSecurityPolicy:
      description: |-
        The Security Policy object.

        A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.
      example:
        created_time: 2000-01-23T04:56:07.000+00:00
        updated_time: 2000-01-23T04:56:07.000+00:00
        net_address_dfps:
        - external_scope_id: external_scope_id
          ip_space_id: ip_space_id
          dfp_ids:
          - 6
          - 6
          addr_net: addr_net
          start: start
          dfp_service_ids:
          - dfp_service_ids
          - dfp_service_ids
          end: end
          host_id: host_id
          scope_type: null
        - external_scope_id: external_scope_id
          ip_space_id: ip_space_id
          dfp_ids:
          - 6
          - 6
          addr_net: addr_net
          start: start
          dfp_service_ids:
          - dfp_service_ids
          - dfp_service_ids
          end: end
          host_id: host_id
          scope_type: null
        description: Security Policy A Description
        dfps:
        - 12456
        - 163211
        onprem_resolve: true
        rules:
        - redirect_name: redirect_a
          data: custom_list_a
          list_id: 12345
          policy_id: 12345
          action: action_block
          policy_name: security_policy_a
          type: custom_list
        - redirect_name: redirect_a
          data: custom_list_a
          list_id: 12345
          policy_id: 12345
          action: action_block
          policy_name: security_policy_a
          type: custom_list
        is_default: false
        precedence: 1
        default_action: action_allow
        safe_search: true
        tags: "{}"
        dfp_services:
        - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6
        - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq
        network_lists:
        - 522436
        - 23465
        ecs: true
        access_codes:
        - access_codes
        - access_codes
        default_redirect_name: redirect_a
        name: security_policy_a
        roaming_device_groups:
        - 56312
        - 461345
        id: 0
        user_groups:
        - user_groups
        - user_groups
      properties:
        access_codes:
          description: Access codes assigned to Security Policy
          items:
            type: string
          type: array
        created_time:
          description: The time when this Security Policy object was created.
          format: date-time
          readOnly: true
          type: string
        default_action:
          description: |-
            The policy-level action gets applied when none of the policy rules apply/match.
            The default value for default_action is "action_allow".
          example: action_allow
          type: string
        default_redirect_name:
          description: "Name of the custom redirect, if the default_action is \"action_redirect\"\
            ."
          example: redirect_a
          type: string
        description:
          description: The brief description for the security policy.
          example: Security Policy A Description
          type: string
        dfp_services:
          description: The list of DNS Forwarding Proxy Services object identifiers.
            For Internal Use only.
          example:
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq
          items:
            type: string
          type: array
        dfps:
          description: The list of DNS Forwarding Proxy object identifiers.
          example:
          - 12456
          - 163211
          items:
            format: int32
            type: integer
          type: array
        ecs:
          description: Use ECS for handling policy
          format: boolean
          type: boolean
        id:
          description: The Security Policy object identifier.
          format: int32
          readOnly: true
          type: integer
        is_default:
          description: Flag that indicates whether this is a default security policy.
          example: false
          format: boolean
          readOnly: true
          type: boolean
        name:
          description: The name of the security policy.
          example: security_policy_a
          type: string
        net_address_dfps:
          description: List of DFPs associated with this policy via network address
            (with corresponding network address)
          items:
            $ref: '#/components/schemas/atcfwNetAddrDfpAssignment'
          type: array
        network_lists:
          description: The list of Network Lists identifiers that represents networks
            that you want to protect from malicious attacks.
          example:
          - 522436
          - 23465
          items:
            format: int64
            type: integer
          type: array
        onprem_resolve:
          description: Use DNS resolve on onprem side
          format: boolean
          type: boolean
        precedence:
          description: |-
            Security precedence enable selection of the highest priority
            policy, in cases where a query matches multiple policies.
          format: int32
          type: integer
        roaming_device_groups:
          description: The list of BloxOne Endpoint groups identifiers.
          example:
          - 56312
          - 461345
          items:
            format: int32
            type: integer
          type: array
        rules:
          description: The list of Security Policy Rules objects that represent the
            set of rules and actions that you define to balance access and constraints
            so you can mitigate malicious attacks and provide security for your networks.
          items:
            $ref: '#/components/schemas/atcfwSecurityPolicyRule'
          type: array
        safe_search:
          description: Apply automated rules to enforce safe search
          format: boolean
          type: boolean
        tags:
          additionalProperties: false
          description: Enables tag support for resource where tags attribute contains
            user-defined key value pairs
          type: object
        updated_time:
          description: The time when this Security Policy object was last updated.
          format: date-time
          readOnly: true
          type: string
        user_groups:
          description: List of user groups associated with this policy
          items:
            type: string
          type: array
      type: object
    atcfwSecurityPolicyCreateResponse:
      description: The Security Policy create response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          net_address_dfps:
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          description: Security Policy A Description
          dfps:
          - 12456
          - 163211
          onprem_resolve: true
          rules:
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          is_default: false
          precedence: 1
          default_action: action_allow
          safe_search: true
          tags: "{}"
          dfp_services:
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq
          network_lists:
          - 522436
          - 23465
          ecs: true
          access_codes:
          - access_codes
          - access_codes
          default_redirect_name: redirect_a
          name: security_policy_a
          roaming_device_groups:
          - 56312
          - 461345
          id: 0
          user_groups:
          - user_groups
          - user_groups
      properties:
        results:
          $ref: '#/components/schemas/atcfwSecurityPolicy'
      type: object
    atcfwSecurityPolicyDeleteRequest:
      description: The Security Policy delete request.
      properties:
        ids:
          description: The list of Security Policy object identifiers.
          example:
          - 12345
          - 53215
          items:
            format: int32
            type: integer
          type: array
      type: object
    atcfwSecurityPolicyMultiResponse:
      description: The Security Policy list response.
      example:
        results:
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          net_address_dfps:
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          description: Security Policy A Description
          dfps:
          - 12456
          - 163211
          onprem_resolve: true
          rules:
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          is_default: false
          precedence: 1
          default_action: action_allow
          safe_search: true
          tags: "{}"
          dfp_services:
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq
          network_lists:
          - 522436
          - 23465
          ecs: true
          access_codes:
          - access_codes
          - access_codes
          default_redirect_name: redirect_a
          name: security_policy_a
          roaming_device_groups:
          - 56312
          - 461345
          id: 0
          user_groups:
          - user_groups
          - user_groups
        - created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          net_address_dfps:
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          description: Security Policy A Description
          dfps:
          - 12456
          - 163211
          onprem_resolve: true
          rules:
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          is_default: false
          precedence: 1
          default_action: action_allow
          safe_search: true
          tags: "{}"
          dfp_services:
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq
          network_lists:
          - 522436
          - 23465
          ecs: true
          access_codes:
          - access_codes
          - access_codes
          default_redirect_name: redirect_a
          name: security_policy_a
          roaming_device_groups:
          - 56312
          - 461345
          id: 0
          user_groups:
          - user_groups
          - user_groups
      properties:
        results:
          description: The list of Security Policy objects.
          items:
            $ref: '#/components/schemas/atcfwSecurityPolicy'
          type: array
      type: object
    atcfwSecurityPolicyReadResponse:
      description: The Security Policy read response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          net_address_dfps:
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          description: Security Policy A Description
          dfps:
          - 12456
          - 163211
          onprem_resolve: true
          rules:
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          is_default: false
          precedence: 1
          default_action: action_allow
          safe_search: true
          tags: "{}"
          dfp_services:
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq
          network_lists:
          - 522436
          - 23465
          ecs: true
          access_codes:
          - access_codes
          - access_codes
          default_redirect_name: redirect_a
          name: security_policy_a
          roaming_device_groups:
          - 56312
          - 461345
          id: 0
          user_groups:
          - user_groups
          - user_groups
      properties:
        results:
          $ref: '#/components/schemas/atcfwSecurityPolicy'
      type: object
    atcfwSecurityPolicyRule:
      description: |-
        The Security Policy Rule object.

        The Security Policy Rule object represents a rule and action that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks.
      example:
        redirect_name: redirect_a
        data: custom_list_a
        list_id: 12345
        policy_id: 12345
        action: action_block
        policy_name: security_policy_a
        type: custom_list
      properties:
        action:
          description: |-
            The action for the policy rule that can be either "action_allow" or "action_log" or "action_redirect" or "action_block" or "action_allow_with_local_resolution".
            "action_allow_with_local_resolution" only supported for application filter rule with enabled onprem_resolve flag on the Security policy.
          example: action_block
          type: string
        data:
          description: "The data source for the policy rule, that can be either a\
            \ name of the predefined feed for \"named_feed\", custom list name for\
            \ \"custom_list\" type, category filter name for \"category_filter\" type\
            \ and application filter name for \"application_filter\" type."
          example: custom_list_a
          type: string
        list_id:
          description: The Custom List object identifier with which the policy rule
            is associated. 0 value means no custom list is associated with this policy
            rule.
          example: 12345
          format: int32
          readOnly: true
          type: integer
        policy_id:
          description: The identifier of the Security Policy object with which the
            policy rule is associated.
          example: 12345
          format: int32
          readOnly: true
          type: integer
        policy_name:
          description: The name of the security policy with which the policy rule
            is associated.
          example: security_policy_a
          type: string
        redirect_name:
          description: The name of the redirect address for redirect actions that
            can be either IPv4 address or a domain name.
          example: redirect_a
          type: string
        type:
          description: The policy rule type that can be either "named_feed" or "custom_list"
            or "category_filter" or "application_filter".
          example: custom_list
          type: string
      type: object
    atcfwSecurityPolicyRuleMultiResponse:
      description: The Security Policy Rule list response.
      example:
        results:
        - redirect_name: redirect_a
          data: custom_list_a
          list_id: 12345
          policy_id: 12345
          action: action_block
          policy_name: security_policy_a
          type: custom_list
        - redirect_name: redirect_a
          data: custom_list_a
          list_id: 12345
          policy_id: 12345
          action: action_block
          policy_name: security_policy_a
          type: custom_list
      properties:
        results:
          description: The list of Security Policy Rule objects.
          items:
            $ref: '#/components/schemas/atcfwSecurityPolicyRule'
          type: array
      type: object
    atcfwSecurityPolicyUpdateResponse:
      description: The Security Policy update response.
      example:
        results:
          created_time: 2000-01-23T04:56:07.000+00:00
          updated_time: 2000-01-23T04:56:07.000+00:00
          net_address_dfps:
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          - external_scope_id: external_scope_id
            ip_space_id: ip_space_id
            dfp_ids:
            - 6
            - 6
            addr_net: addr_net
            start: start
            dfp_service_ids:
            - dfp_service_ids
            - dfp_service_ids
            end: end
            host_id: host_id
            scope_type: null
          description: Security Policy A Description
          dfps:
          - 12456
          - 163211
          onprem_resolve: true
          rules:
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          - redirect_name: redirect_a
            data: custom_list_a
            list_id: 12345
            policy_id: 12345
            action: action_block
            policy_name: security_policy_a
            type: custom_list
          is_default: false
          precedence: 1
          default_action: action_allow
          safe_search: true
          tags: "{}"
          dfp_services:
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6
          - u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq
          network_lists:
          - 522436
          - 23465
          ecs: true
          access_codes:
          - access_codes
          - access_codes
          default_redirect_name: redirect_a
          name: security_policy_a
          roaming_device_groups:
          - 56312
          - 461345
          id: 0
          user_groups:
          - user_groups
          - user_groups
      properties:
        results:
          $ref: '#/components/schemas/atcfwSecurityPolicy'
      type: object
    atcfwThreatFeed:
      description: |-
        The Threat Feed object.

        BloxOne Cloud provides predefined threat intelligence feeds based on your subscription. The Plus subscription offers a few more feeds than the Standard subscription. The Advanced subscription offers a few more feeds than the Plus subscription. A threat feed subscription for RPZ updates offers protection against malicious hostnames.
      example:
        threat_level: LOW
        confidence_level: LOW
        name: ETIQRisk
        description: Threat Feed Description
        source: null
        key: etiqrisk
      properties:
        confidence_level:
          description: The Confidence Level of the Feed.
          example: LOW
          readOnly: true
          type: string
        description:
          description: The brief description for the thread feed.
          example: Threat Feed Description
          readOnly: true
          type: string
        key:
          description: The TSIG key of the threat feed.
          example: etiqrisk
          readOnly: true
          type: string
        name:
          description: The name of the thread feed.
          example: ETIQRisk
          readOnly: true
          type: string
        source:
          $ref: '#/components/schemas/ThreatFeedSource'
        threat_level:
          description: The Threat Level of the Feed.
          example: LOW
          readOnly: true
          type: string
      type: object
    atcfwThreatFeedMultiResponse:
      description: The Threat Feed list response.
      example:
        results:
        - threat_level: LOW
          confidence_level: LOW
          name: ETIQRisk
          description: Threat Feed Description
          source: null
          key: etiqrisk
        - threat_level: LOW
          confidence_level: LOW
          name: ETIQRisk
          description: Threat Feed Description
          source: null
          key: etiqrisk
      properties:
        results:
          description: The list of Threat Feed objects.
          items:
            $ref: '#/components/schemas/atcfwThreatFeed'
          type: array
      type: object
    protobufFieldMask:
      description: |-
        paths: "f.a"
            paths: "f.b.d"

        Here `f` represents a field in some root message, `a` and `b`
        fields in the message found in `f`, and `d` a field found in the
        message in `f.b`.

        Field masks are used to specify a subset of fields that should be
        returned by a get operation or modified by an update operation.
        Field masks also have a custom JSON encoding (see below).

        # Field Masks in Projections

        When used in the context of a projection, a response message or
        sub-message is filtered by the API to only contain those fields as
        specified in the mask. For example, if the mask in the previous
        example is applied to a response message as follows:

            f {
              a : 22
              b {
                d : 1
                x : 2
              }
              y : 13
            }
            z: 8

        The result will not contain specific values for fields x,y and z
        (their value will be set to the default, and omitted in proto text
        output):


            f {
              a : 22
              b {
                d : 1
              }
            }

        A repeated field is not allowed except at the last position of a
        paths string.

        If a FieldMask object is not present in a get operation, the
        operation applies to all fields (as if a FieldMask of all fields
        had been specified).

        Note that a field mask does not necessarily apply to the
        top-level response message. In case of a REST get operation, the
        field mask applies directly to the response, but in case of a REST
        list operation, the mask instead applies to each individual message
        in the returned resource list. In case of a REST custom method,
        other definitions may be used. Where the mask applies will be
        clearly documented together with its declaration in the API.  In
        any case, the effect on the returned resource/resources is required
        behavior for APIs.

        # Field Masks in Update Operations

        A field mask in update operations specifies which fields of the
        targeted resource are going to be updated. The API is required
        to only change the values of the fields as specified in the mask
        and leave the others untouched. If a resource is passed in to
        describe the updated values, the API ignores the values of all
        fields not covered by the mask.

        If a repeated field is specified for an update operation, new values will
        be appended to the existing repeated field in the target resource. Note that
        a repeated field is only allowed in the last position of a `paths` string.

        If a sub-message is specified in the last position of the field mask for an
        update operation, then new value will be merged into the existing sub-message
        in the target resource.

        For example, given the target message:

            f {
              b {
                d: 1
                x: 2
              }
              c: [1]
            }

        And an update message:

            f {
              b {
                d: 10
              }
              c: [2]
            }

        then if the field mask is:

         paths: ["f.b", "f.c"]

        then the result will be:

            f {
              b {
                d: 10
                x: 2
              }
              c: [1, 2]
            }

        An implementation may provide options to override this default behavior for
        repeated and message fields.

        In order to reset a field's value to the default, the field must
        be in the mask and set to the default value in the provided resource.
        Hence, in order to reset all fields of a resource, provide a default
        instance of the resource and set all fields in the mask, or do
        not provide a mask as described below.

        If a field mask is not present on update, the operation applies to
        all fields (as if a field mask of all fields has been specified).
        Note that in the presence of schema evolution, this may mean that
        fields the client does not know and has therefore not filled into
        the request will be reset to their default. If this is unwanted
        behavior, a specific service may require a client to always specify
        a field mask, producing an error if not.

        As with get operations, the location of the resource which
        describes the updated values in the request message depends on the
        operation kind. In any case, the effect of the field mask is
        required to be honored by the API.

        ## Considerations for HTTP REST

        The HTTP kind of an update operation which uses a field mask must
        be set to PATCH instead of PUT in order to satisfy HTTP semantics
        (PUT must only be used for full updates).

        # JSON Encoding of Field Masks

        In JSON, a field mask is encoded as a single string where paths are
        separated by a comma. Fields name in each path are converted
        to/from lower-camel naming conventions.

        As an example, consider the following message declarations:

            message Profile {
              User user = 1;
              Photo photo = 2;
            }
            message User {
              string display_name = 1;
              string address = 2;
            }

        In proto a field mask for `Profile` may look as such:

            mask {
              paths: "user.display_name"
              paths: "photo"
            }

        In JSON, the same mask is represented as below:

            {
              mask: "user.displayName,photo"
            }

        # Field Masks and Oneof Fields

        Field masks treat fields in oneofs just as regular fields. Consider the
        following message:

            message SampleMessage {
              oneof test_oneof {
                string name = 4;
                SubMessage sub_message = 9;
              }
            }

        The field mask can be:

            mask {
              paths: "name"
            }

        Or:

            mask {
              paths: "sub_message"
            }

        Note that oneof type names ("test_oneof" in this case) cannot be used in
        paths.

        ## Field Mask Verification

        The implementation of any API method which has a FieldMask type field in the
        request should verify the included field paths, and return an
        `INVALID_ARGUMENT` error if any path is unmappable.
      properties:
        paths:
          description: The set of field mask paths.
          items:
            type: string
          type: array
      title: "`FieldMask` represents a set of symbolic field paths, for example:"
      type: object
    access_codesListAccessCodes_500_response_error:
      example:
        code: INTERNAL
        message: Internal Server Error
        status: "500"
      properties:
        code:
          example: INTERNAL
          type: string
        message:
          example: Internal Server Error
          type: string
        status:
          example: "500"
          type: string
      type: object
    access_codesListAccessCodes_500_response:
      example:
        error:
          code: INTERNAL
          message: Internal Server Error
          status: "500"
      properties:
        error:
          $ref: '#/components/schemas/access_codesListAccessCodes_500_response_error'
      type: object
    access_codesCreateAccessCode_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: rules' must not be empty
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: rules' must not be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    access_codesCreateAccessCode_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: rules' must not be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/access_codesCreateAccessCode_400_response_error'
      type: object
    access_codesCreateAccessCode_404_response_error:
      example:
        code: NOT_FOUND
        message: "Invalid Rule: List 'custom-list-a.com' not found"
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: "Invalid Rule: List 'custom-list-a.com' not found"
          type: string
        status:
          example: "404"
          type: string
      type: object
    access_codesCreateAccessCode_404_response:
      example:
        error:
          code: NOT_FOUND
          message: "Invalid Rule: List 'custom-list-a.com' not found"
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/access_codesCreateAccessCode_404_response_error'
      type: object
    access_codesCreateAccessCode_409_response_error:
      example:
        code: ALREADY_EXISTS
        message: Bypass Code with name 'acc_code' already exists
        status: "409"
      properties:
        code:
          example: ALREADY_EXISTS
          type: string
        message:
          example: Bypass Code with name 'acc_code' already exists
          type: string
        status:
          example: "409"
          type: string
      type: object
    access_codesCreateAccessCode_409_response:
      example:
        error:
          code: ALREADY_EXISTS
          message: Bypass Code with name 'acc_code' already exists
          status: "409"
      properties:
        error:
          $ref: '#/components/schemas/access_codesCreateAccessCode_409_response_error'
      type: object
    access_codesDeleteAccessCodes_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: '''ids'' must not be empty'
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: '''ids'' must not be empty'
          type: string
        status:
          example: "400"
          type: string
      type: object
    access_codesDeleteAccessCodes_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: '''ids'' must not be empty'
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/access_codesDeleteAccessCodes_400_response_error'
      type: object
    access_codesReadAccessCode_404_response_error:
      example:
        code: NOT_FOUND
        message: Bypass Code does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Bypass Code does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    access_codesReadAccessCode_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Bypass Code does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/access_codesReadAccessCode_404_response_error'
      type: object
    access_codesDeleteSingleAccessCodes_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Cannot delete bypass code assigned to policy
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Cannot delete bypass code assigned to policy
          type: string
        status:
          example: "400"
          type: string
      type: object
    access_codesDeleteSingleAccessCodes_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Cannot delete bypass code assigned to policy
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/access_codesDeleteSingleAccessCodes_400_response_error'
      type: object
    application_filtersDeleteApplicationFilters_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Application Filter ids can't be empty
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Application Filter ids can't be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    application_filtersDeleteApplicationFilters_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Application Filter ids can't be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/application_filtersDeleteApplicationFilters_400_response_error'
      type: object
    application_filtersDeleteSingleApplicationFilters_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: "invalid 'id': value must be greater than or equal to 0"
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: "invalid 'id': value must be greater than or equal to 0"
          type: string
        status:
          example: "400"
          type: string
      type: object
    application_filtersDeleteSingleApplicationFilters_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: "invalid 'id': value must be greater than or equal to 0"
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/application_filtersDeleteSingleApplicationFilters_400_response_error'
      type: object
    category_filtersCreateCategoryFilter_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: '''name'' must not be empty'
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: '''name'' must not be empty'
          type: string
        status:
          example: "400"
          type: string
      type: object
    category_filtersCreateCategoryFilter_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: '''name'' must not be empty'
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/category_filtersCreateCategoryFilter_400_response_error'
      type: object
    category_filtersCreateCategoryFilter_409_response_error:
      example:
        code: ALREADY_EXISTS
        message: Cannot use duplicate name "category_filter_a"
        status: "409"
      properties:
        code:
          example: ALREADY_EXISTS
          type: string
        message:
          example: Cannot use duplicate name "category_filter_a"
          type: string
        status:
          example: "409"
          type: string
      type: object
    category_filtersCreateCategoryFilter_409_response:
      example:
        error:
          code: ALREADY_EXISTS
          message: Cannot use duplicate name "category_filter_a"
          status: "409"
      properties:
        error:
          $ref: '#/components/schemas/category_filtersCreateCategoryFilter_409_response_error'
      type: object
    category_filtersDeleteCategoryFilters_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Category Filter ids can't be empty
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Category Filter ids can't be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    category_filtersDeleteCategoryFilters_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Category Filter ids can't be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/category_filtersDeleteCategoryFilters_400_response_error'
      type: object
    category_filtersReadCategoryFilter_404_response_error:
      example:
        code: NOT_FOUND
        message: Category Filter does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Category Filter does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    category_filtersReadCategoryFilter_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Category Filter does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/category_filtersReadCategoryFilter_404_response_error'
      type: object
    internal_domain_listsCreateInternalDomains_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: internal_domains' must not be empty
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: internal_domains' must not be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    internal_domain_listsCreateInternalDomains_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: internal_domains' must not be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsCreateInternalDomains_400_response_error'
      type: object
    internal_domain_listsCreateInternalDomains_409_response_error:
      example:
        code: ALREADY_EXISTS
        message: Cannot use duplicate name <name>
        status: "409"
      properties:
        code:
          example: ALREADY_EXISTS
          type: string
        message:
          example: Cannot use duplicate name <name>
          type: string
        status:
          example: "409"
          type: string
      type: object
    internal_domain_listsCreateInternalDomains_409_response:
      example:
        error:
          code: ALREADY_EXISTS
          message: Cannot use duplicate name <name>
          status: "409"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsCreateInternalDomains_409_response_error'
      type: object
    internal_domain_listsDeleteInternalDomains_400_response_error:
      example:
        code: FAILED_PRECONDITION
        message: Internal Domains List ids can't be empty
        status: "400"
      properties:
        code:
          example: FAILED_PRECONDITION
          type: string
        message:
          example: Internal Domains List ids can't be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    internal_domain_listsDeleteInternalDomains_400_response:
      example:
        error:
          code: FAILED_PRECONDITION
          message: Internal Domains List ids can't be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsDeleteInternalDomains_400_response_error'
      type: object
    internal_domain_listsDeleteInternalDomains_404_response_error:
      example:
        code: NOT_FOUND
        message: Internal Domain List does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Internal Domain List does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    internal_domain_listsDeleteInternalDomains_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Internal Domain List does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsDeleteInternalDomains_404_response_error'
      type: object
    internal_domain_listsReadInternalDomains_404_response_error:
      example:
        code: NOT_FOUND
        message: Internal Domain list does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Internal Domain list does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    internal_domain_listsReadInternalDomains_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Internal Domain list does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsReadInternalDomains_404_response_error'
      type: object
    internal_domain_listsUpdateInternalDomains_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: name' must not be empty
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: name' must not be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    internal_domain_listsUpdateInternalDomains_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: name' must not be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsUpdateInternalDomains_400_response_error'
      type: object
    internal_domain_listsUpdateInternalDomains_404_response_error:
      example:
        code: NOT_FOUND
        message: Given Internal Domain List does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Given Internal Domain List does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    internal_domain_listsUpdateInternalDomains_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Given Internal Domain List does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsUpdateInternalDomains_404_response_error'
      type: object
    internal_domain_listsDeleteSingleInternalDomains_400_response_error:
      example:
        code: FAILED_PRECONDITION
        message: "invalid 'id': value must be greater than or equal to 0"
        status: "400"
      properties:
        code:
          example: FAILED_PRECONDITION
          type: string
        message:
          example: "invalid 'id': value must be greater than or equal to 0"
          type: string
        status:
          example: "400"
          type: string
      type: object
    internal_domain_listsDeleteSingleInternalDomains_400_response:
      example:
        error:
          code: FAILED_PRECONDITION
          message: "invalid 'id': value must be greater than or equal to 0"
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsDeleteSingleInternalDomains_400_response_error'
      type: object
    internal_domain_listsInternalDomainsItemsPartialUpdate_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Invalid domain or IPv4 address or network '1.1.1'
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Invalid domain or IPv4 address or network '1.1.1'
          type: string
        status:
          example: "400"
          type: string
      type: object
    internal_domain_listsInternalDomainsItemsPartialUpdate_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Invalid domain or IPv4 address or network '1.1.1'
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsInternalDomainsItemsPartialUpdate_400_response_error'
      type: object
    internal_domain_listsInternalDomainsItemsPartialUpdate_404_response_error:
      example:
        code: NOT_FOUND
        message: List does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: List does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    internal_domain_listsInternalDomainsItemsPartialUpdate_404_response:
      example:
        error:
          code: NOT_FOUND
          message: List does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/internal_domain_listsInternalDomainsItemsPartialUpdate_404_response_error'
      type: object
    named_listsCreateNamedList_409_response_error:
      example:
        code: ALREADY_EXISTS
        message: Cannot use duplicate name "named_list_a"
        status: "409"
      properties:
        code:
          example: ALREADY_EXISTS
          type: string
        message:
          example: Cannot use duplicate name "named_list_a"
          type: string
        status:
          example: "409"
          type: string
      type: object
    named_listsCreateNamedList_409_response:
      example:
        error:
          code: ALREADY_EXISTS
          message: Cannot use duplicate name "named_list_a"
          status: "409"
      properties:
        error:
          $ref: '#/components/schemas/named_listsCreateNamedList_409_response_error'
      type: object
    named_listsDeleteNamedLists_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Named List ids can't be empty
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Named List ids can't be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    named_listsDeleteNamedLists_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Named List ids can't be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/named_listsDeleteNamedLists_400_response_error'
      type: object
    named_listsDeleteNamedLists_404_response_error:
      example:
        code: NOT_FOUND
        message: "Non-existent named list(s): <id>"
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: "Non-existent named list(s): <id>"
          type: string
        status:
          example: "404"
          type: string
      type: object
    named_listsDeleteNamedLists_404_response:
      example:
        error:
          code: NOT_FOUND
          message: "Non-existent named list(s): <id>"
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/named_listsDeleteNamedLists_404_response_error'
      type: object
    named_listsMultiListUpdate_404_response_error:
      example:
        code: NOT_FOUND
        message: Named List does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Named List does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    named_listsMultiListUpdate_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Named List does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/named_listsMultiListUpdate_404_response_error'
      type: object
    named_listsDeleteSingleNamedLists_404_response_error:
      example:
        code: NOT_FOUND
        message: "Non-existent named list(s): 'id'"
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: "Non-existent named list(s): 'id'"
          type: string
        status:
          example: "404"
          type: string
      type: object
    named_listsDeleteSingleNamedLists_404_response:
      example:
        error:
          code: NOT_FOUND
          message: "Non-existent named list(s): 'id'"
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/named_listsDeleteSingleNamedLists_404_response_error'
      type: object
    named_listsUpdateNamedListPartial_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Neither 'threat_level' nor 'confidence_level' exists in the request
          body
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Neither 'threat_level' nor 'confidence_level' exists in the request
            body
          type: string
        status:
          example: "400"
          type: string
      type: object
    named_listsUpdateNamedListPartial_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Neither 'threat_level' nor 'confidence_level' exists in the request
            body
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/named_listsUpdateNamedListPartial_400_response_error'
      type: object
    named_listsUpdateNamedListPartial_404_response_error:
      example:
        code: NOT_FOUND
        message: Given Named List does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Given Named List does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    named_listsUpdateNamedListPartial_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Given Named List does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/named_listsUpdateNamedListPartial_404_response_error'
      type: object
    named_listsUpdateNamedListPartial_405_response_error:
      example:
        code: NOT_ALLOWED
        message: Method not allowed
        status: "405"
      properties:
        code:
          example: NOT_ALLOWED
          type: string
        message:
          example: Method not allowed
          type: string
        status:
          example: "405"
          type: string
      type: object
    named_listsUpdateNamedListPartial_405_response:
      example:
        error:
          code: NOT_ALLOWED
          message: Method not allowed
          status: "405"
      properties:
        error:
          $ref: '#/components/schemas/named_listsUpdateNamedListPartial_405_response_error'
      type: object
    named_list_itemsInsertOrReplaceNamedListItems_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Invalid domain or IP address or network '1.1.1'
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Invalid domain or IP address or network '1.1.1'
          type: string
        status:
          example: "400"
          type: string
      type: object
    named_list_itemsInsertOrReplaceNamedListItems_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Invalid domain or IP address or network '1.1.1'
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/named_list_itemsInsertOrReplaceNamedListItems_400_response_error'
      type: object
    named_list_itemsDeleteNamedListItems_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: One or more items are no assigned to the Named List
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: One or more items are no assigned to the Named List
          type: string
        status:
          example: "400"
          type: string
      type: object
    named_list_itemsDeleteNamedListItems_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: One or more items are no assigned to the Named List
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/named_list_itemsDeleteNamedListItems_400_response_error'
      type: object
    named_list_itemsNamedListItemsPartialUpdate_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Invalid domain or IP address or network '1.1.1.1.1'
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Invalid domain or IP address or network '1.1.1.1.1'
          type: string
        status:
          example: "400"
          type: string
      type: object
    named_list_itemsNamedListItemsPartialUpdate_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Invalid domain or IP address or network '1.1.1.1.1'
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/named_list_itemsNamedListItemsPartialUpdate_400_response_error'
      type: object
    network_listsCreateNetworkList_409_response_error:
      example:
        code: ALREADY_EXISTS
        message: Cannot use duplicate name "network_list_a"
        status: "409"
      properties:
        code:
          example: ALREADY_EXISTS
          type: string
        message:
          example: Cannot use duplicate name "network_list_a"
          type: string
        status:
          example: "409"
          type: string
      type: object
    network_listsCreateNetworkList_409_response:
      example:
        error:
          code: ALREADY_EXISTS
          message: Cannot use duplicate name "network_list_a"
          status: "409"
      properties:
        error:
          $ref: '#/components/schemas/network_listsCreateNetworkList_409_response_error'
      type: object
    network_listsDeleteNetworkLists_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: Network List ids can't be empty
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: Network List ids can't be empty
          type: string
        status:
          example: "400"
          type: string
      type: object
    network_listsDeleteNetworkLists_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: Network List ids can't be empty
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/network_listsDeleteNetworkLists_400_response_error'
      type: object
    network_listsDeleteNetworkLists_404_response_error:
      example:
        code: NOT_FOUND
        message: Network List does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Network List does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    network_listsDeleteNetworkLists_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Network List does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/network_listsDeleteNetworkLists_404_response_error'
      type: object
    pop_regionsReadPoPRegion_404_response_error:
      example:
        code: NOT_FOUND
        message: PoP region doesn't exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: PoP region doesn't exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    pop_regionsReadPoPRegion_404_response:
      example:
        error:
          code: NOT_FOUND
          message: PoP region doesn't exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/pop_regionsReadPoPRegion_404_response_error'
      type: object
    security_policiesCreateSecurityPolicy_400_response_error:
      example:
        code: INVALID_ARGUMENT
        message: '''name'' length cannot exceed 256 characters limit'
        status: "400"
      properties:
        code:
          example: INVALID_ARGUMENT
          type: string
        message:
          example: '''name'' length cannot exceed 256 characters limit'
          type: string
        status:
          example: "400"
          type: string
      type: object
    security_policiesCreateSecurityPolicy_400_response:
      example:
        error:
          code: INVALID_ARGUMENT
          message: '''name'' length cannot exceed 256 characters limit'
          status: "400"
      properties:
        error:
          $ref: '#/components/schemas/security_policiesCreateSecurityPolicy_400_response_error'
      type: object
    security_policiesCreateSecurityPolicy_409_response_error:
      example:
        code: ALREADY_EXISTS
        message: Security Policy with name 'sec_policy_a' already exists
        status: "409"
      properties:
        code:
          example: ALREADY_EXISTS
          type: string
        message:
          example: Security Policy with name 'sec_policy_a' already exists
          type: string
        status:
          example: "409"
          type: string
      type: object
    security_policiesCreateSecurityPolicy_409_response:
      example:
        error:
          code: ALREADY_EXISTS
          message: Security Policy with name 'sec_policy_a' already exists
          status: "409"
      properties:
        error:
          $ref: '#/components/schemas/security_policiesCreateSecurityPolicy_409_response_error'
      type: object
    security_policiesReadSecurityPolicy_404_response_error:
      example:
        code: NOT_FOUND
        message: Security Policy does not exist
        status: "404"
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Security Policy does not exist
          type: string
        status:
          example: "404"
          type: string
      type: object
    security_policiesReadSecurityPolicy_404_response:
      example:
        error:
          code: NOT_FOUND
          message: Security Policy does not exist
          status: "404"
      properties:
        error:
          $ref: '#/components/schemas/security_policiesReadSecurityPolicy_404_response_error'
      type: object
    atcfwNamedListItemsInsertOrUpdateResponse_success:
      example:
        code: UPDATED
        status: 201
      properties:
        code:
          example: UPDATED
          type: string
        status:
          example: 201
          format: int32
          type: integer
      type: object
x-original-swagger-version: "2.0"
