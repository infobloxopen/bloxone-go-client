/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcInteger128 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcInteger128{}

// IpamsvcInteger128 struct for IpamsvcInteger128
type IpamsvcInteger128 struct {
	RawValue *string `json:"raw_value,omitempty"`
}

// NewIpamsvcInteger128 instantiates a new IpamsvcInteger128 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcInteger128() *IpamsvcInteger128 {
	this := IpamsvcInteger128{}
	return &this
}

// NewIpamsvcInteger128WithDefaults instantiates a new IpamsvcInteger128 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcInteger128WithDefaults() *IpamsvcInteger128 {
	this := IpamsvcInteger128{}
	return &this
}

// GetRawValue returns the RawValue field value if set, zero value otherwise.
func (o *IpamsvcInteger128) GetRawValue() string {
	if o == nil || IsNil(o.RawValue) {
		var ret string
		return ret
	}
	return *o.RawValue
}

// GetRawValueOk returns a tuple with the RawValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcInteger128) GetRawValueOk() (*string, bool) {
	if o == nil || IsNil(o.RawValue) {
		return nil, false
	}
	return o.RawValue, true
}

// HasRawValue returns a boolean if a field has been set.
func (o *IpamsvcInteger128) HasRawValue() bool {
	if o != nil && !IsNil(o.RawValue) {
		return true
	}

	return false
}

// SetRawValue gets a reference to the given string and assigns it to the RawValue field.
func (o *IpamsvcInteger128) SetRawValue(v string) {
	o.RawValue = &v
}

func (o IpamsvcInteger128) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcInteger128) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RawValue) {
		toSerialize["raw_value"] = o.RawValue
	}
	return toSerialize, nil
}

type NullableIpamsvcInteger128 struct {
	value *IpamsvcInteger128
	isSet bool
}

func (v NullableIpamsvcInteger128) Get() *IpamsvcInteger128 {
	return v.value
}

func (v *NullableIpamsvcInteger128) Set(val *IpamsvcInteger128) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcInteger128) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcInteger128) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcInteger128(val *IpamsvcInteger128) *NullableIpamsvcInteger128 {
	return &NullableIpamsvcInteger128{value: val, isSet: true}
}

func (v NullableIpamsvcInteger128) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcInteger128) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
