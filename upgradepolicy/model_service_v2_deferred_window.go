/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"encoding/json"
	"time"
)

// checks if the ServiceV2DeferredWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceV2DeferredWindow{}

// ServiceV2DeferredWindow struct for ServiceV2DeferredWindow
type ServiceV2DeferredWindow struct {
	CreatedAt            *time.Time `json:"created_at,omitempty"`
	Enabled              *bool      `json:"enabled,omitempty"`
	EndTime              *time.Time `json:"end_time,omitempty"`
	StartTime            *time.Time `json:"start_time,omitempty"`
	UpdatedAt            *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceV2DeferredWindow ServiceV2DeferredWindow

// NewServiceV2DeferredWindow instantiates a new ServiceV2DeferredWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceV2DeferredWindow() *ServiceV2DeferredWindow {
	this := ServiceV2DeferredWindow{}
	return &this
}

// NewServiceV2DeferredWindowWithDefaults instantiates a new ServiceV2DeferredWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceV2DeferredWindowWithDefaults() *ServiceV2DeferredWindow {
	this := ServiceV2DeferredWindow{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ServiceV2DeferredWindow) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceV2DeferredWindow) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ServiceV2DeferredWindow) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ServiceV2DeferredWindow) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ServiceV2DeferredWindow) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceV2DeferredWindow) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ServiceV2DeferredWindow) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ServiceV2DeferredWindow) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ServiceV2DeferredWindow) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceV2DeferredWindow) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ServiceV2DeferredWindow) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *ServiceV2DeferredWindow) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ServiceV2DeferredWindow) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceV2DeferredWindow) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ServiceV2DeferredWindow) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *ServiceV2DeferredWindow) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ServiceV2DeferredWindow) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceV2DeferredWindow) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ServiceV2DeferredWindow) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ServiceV2DeferredWindow) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ServiceV2DeferredWindow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceV2DeferredWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceV2DeferredWindow) UnmarshalJSON(data []byte) (err error) {
	varServiceV2DeferredWindow := _ServiceV2DeferredWindow{}

	err = json.Unmarshal(data, &varServiceV2DeferredWindow)

	if err != nil {
		return err
	}

	*o = ServiceV2DeferredWindow(varServiceV2DeferredWindow)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "end_time")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceV2DeferredWindow struct {
	value *ServiceV2DeferredWindow
	isSet bool
}

func (v NullableServiceV2DeferredWindow) Get() *ServiceV2DeferredWindow {
	return v.value
}

func (v *NullableServiceV2DeferredWindow) Set(val *ServiceV2DeferredWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceV2DeferredWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceV2DeferredWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceV2DeferredWindow(val *ServiceV2DeferredWindow) *NullableServiceV2DeferredWindow {
	return &NullableServiceV2DeferredWindow{value: val, isSet: true}
}

func (v NullableServiceV2DeferredWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceV2DeferredWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
