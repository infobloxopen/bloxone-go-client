/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/bloxone-go-client/internal"
)

type UpgradePolicyV2API interface {
	/*
		UpgradePolicyV2ApplyConfigNow Immediately apply the config updates object to the list of hosts

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest
	*/
	UpgradePolicyV2ApplyConfigNow(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest

	// UpgradePolicyV2ApplyConfigNowExecute executes the request
	//  @return ServiceV2ApplyConfigNowResponse
	UpgradePolicyV2ApplyConfigNowExecute(r UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest) (*ServiceV2ApplyConfigNowResponse, *http.Response, error)
	/*
		UpgradePolicyV2Batch Create, update and/or delete multiple maintenance windows in a single request

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return UpgradePolicyV2APIUpgradePolicyV2BatchRequest
	*/
	UpgradePolicyV2Batch(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2BatchRequest

	// UpgradePolicyV2BatchExecute executes the request
	//  @return ServiceV2BatchMaintenanceWindowResponse
	UpgradePolicyV2BatchExecute(r UpgradePolicyV2APIUpgradePolicyV2BatchRequest) (*ServiceV2BatchMaintenanceWindowResponse, *http.Response, error)
	/*
		UpgradePolicyV2Create Create a maintenance window

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return UpgradePolicyV2APIUpgradePolicyV2CreateRequest
	*/
	UpgradePolicyV2Create(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2CreateRequest

	// UpgradePolicyV2CreateExecute executes the request
	//  @return ServiceV2CreateMaintenanceWindowResponse
	UpgradePolicyV2CreateExecute(r UpgradePolicyV2APIUpgradePolicyV2CreateRequest) (*ServiceV2CreateMaintenanceWindowResponse, *http.Response, error)
	/*
		UpgradePolicyV2Delete Delete maintenance window

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id uuid of a maintenance window record
		@return UpgradePolicyV2APIUpgradePolicyV2DeleteRequest
	*/
	UpgradePolicyV2Delete(ctx context.Context, id string) UpgradePolicyV2APIUpgradePolicyV2DeleteRequest

	// UpgradePolicyV2DeleteExecute executes the request
	//  @return ServiceV2DeleteMaintenanceWindowResponse
	UpgradePolicyV2DeleteExecute(r UpgradePolicyV2APIUpgradePolicyV2DeleteRequest) (*ServiceV2DeleteMaintenanceWindowResponse, *http.Response, error)
	/*
		UpgradePolicyV2Get Read a maintenance window

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id uuid of a maintenance window record
		@return UpgradePolicyV2APIUpgradePolicyV2GetRequest
	*/
	UpgradePolicyV2Get(ctx context.Context, id string) UpgradePolicyV2APIUpgradePolicyV2GetRequest

	// UpgradePolicyV2GetExecute executes the request
	//  @return ServiceV2GetMaintenanceWindowResponse
	UpgradePolicyV2GetExecute(r UpgradePolicyV2APIUpgradePolicyV2GetRequest) (*ServiceV2GetMaintenanceWindowResponse, *http.Response, error)
	/*
		UpgradePolicyV2List List all the maintenance windows

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return UpgradePolicyV2APIUpgradePolicyV2ListRequest
	*/
	UpgradePolicyV2List(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2ListRequest

	// UpgradePolicyV2ListExecute executes the request
	//  @return ServiceV2ListMaintenanceWindowResponse
	UpgradePolicyV2ListExecute(r UpgradePolicyV2APIUpgradePolicyV2ListRequest) (*ServiceV2ListMaintenanceWindowResponse, *http.Response, error)
	/*
		UpgradePolicyV2Update Update an existing maintenance window

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id uuid of a maintenance window record
		@return UpgradePolicyV2APIUpgradePolicyV2UpdateRequest
	*/
	UpgradePolicyV2Update(ctx context.Context, id string) UpgradePolicyV2APIUpgradePolicyV2UpdateRequest

	// UpgradePolicyV2UpdateExecute executes the request
	//  @return ServiceV2UpdateMaintenanceWindowResponse
	UpgradePolicyV2UpdateExecute(r UpgradePolicyV2APIUpgradePolicyV2UpdateRequest) (*ServiceV2UpdateMaintenanceWindowResponse, *http.Response, error)
}

// UpgradePolicyV2APIService UpgradePolicyV2API service
type UpgradePolicyV2APIService internal.Service

type UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest struct {
	ctx        context.Context
	ApiService UpgradePolicyV2API
	body       *ServiceV2ApplyConfigNowRequest
}

func (r UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest) Body(body ServiceV2ApplyConfigNowRequest) UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest {
	r.body = &body
	return r
}

func (r UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest) Execute() (*ServiceV2ApplyConfigNowResponse, *http.Response, error) {
	return r.ApiService.UpgradePolicyV2ApplyConfigNowExecute(r)
}

/*
UpgradePolicyV2ApplyConfigNow Immediately apply the config updates object to the list of hosts

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest
*/
func (a *UpgradePolicyV2APIService) UpgradePolicyV2ApplyConfigNow(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest {
	return UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceV2ApplyConfigNowResponse
func (a *UpgradePolicyV2APIService) UpgradePolicyV2ApplyConfigNowExecute(r UpgradePolicyV2APIUpgradePolicyV2ApplyConfigNowRequest) (*ServiceV2ApplyConfigNowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ServiceV2ApplyConfigNowResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "UpgradePolicyV2APIService.UpgradePolicyV2ApplyConfigNow")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/v2/config/apply_now"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpgradePolicyV2APIUpgradePolicyV2BatchRequest struct {
	ctx        context.Context
	ApiService UpgradePolicyV2API
	body       *ServiceV2BatchMaintenanceWindowRequest
}

func (r UpgradePolicyV2APIUpgradePolicyV2BatchRequest) Body(body ServiceV2BatchMaintenanceWindowRequest) UpgradePolicyV2APIUpgradePolicyV2BatchRequest {
	r.body = &body
	return r
}

func (r UpgradePolicyV2APIUpgradePolicyV2BatchRequest) Execute() (*ServiceV2BatchMaintenanceWindowResponse, *http.Response, error) {
	return r.ApiService.UpgradePolicyV2BatchExecute(r)
}

/*
UpgradePolicyV2Batch Create, update and/or delete multiple maintenance windows in a single request

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UpgradePolicyV2APIUpgradePolicyV2BatchRequest
*/
func (a *UpgradePolicyV2APIService) UpgradePolicyV2Batch(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2BatchRequest {
	return UpgradePolicyV2APIUpgradePolicyV2BatchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceV2BatchMaintenanceWindowResponse
func (a *UpgradePolicyV2APIService) UpgradePolicyV2BatchExecute(r UpgradePolicyV2APIUpgradePolicyV2BatchRequest) (*ServiceV2BatchMaintenanceWindowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ServiceV2BatchMaintenanceWindowResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "UpgradePolicyV2APIService.UpgradePolicyV2Batch")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/v2/maintenance_windows/batch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpgradePolicyV2APIUpgradePolicyV2CreateRequest struct {
	ctx        context.Context
	ApiService UpgradePolicyV2API
	body       *ServiceV2CreateMaintenanceWindowRequest
}

func (r UpgradePolicyV2APIUpgradePolicyV2CreateRequest) Body(body ServiceV2CreateMaintenanceWindowRequest) UpgradePolicyV2APIUpgradePolicyV2CreateRequest {
	r.body = &body
	return r
}

func (r UpgradePolicyV2APIUpgradePolicyV2CreateRequest) Execute() (*ServiceV2CreateMaintenanceWindowResponse, *http.Response, error) {
	return r.ApiService.UpgradePolicyV2CreateExecute(r)
}

/*
UpgradePolicyV2Create Create a maintenance window

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UpgradePolicyV2APIUpgradePolicyV2CreateRequest
*/
func (a *UpgradePolicyV2APIService) UpgradePolicyV2Create(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2CreateRequest {
	return UpgradePolicyV2APIUpgradePolicyV2CreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceV2CreateMaintenanceWindowResponse
func (a *UpgradePolicyV2APIService) UpgradePolicyV2CreateExecute(r UpgradePolicyV2APIUpgradePolicyV2CreateRequest) (*ServiceV2CreateMaintenanceWindowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ServiceV2CreateMaintenanceWindowResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "UpgradePolicyV2APIService.UpgradePolicyV2Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/v2/maintenance_windows"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpgradePolicyV2APIUpgradePolicyV2DeleteRequest struct {
	ctx        context.Context
	ApiService UpgradePolicyV2API
	id         string
}

func (r UpgradePolicyV2APIUpgradePolicyV2DeleteRequest) Execute() (*ServiceV2DeleteMaintenanceWindowResponse, *http.Response, error) {
	return r.ApiService.UpgradePolicyV2DeleteExecute(r)
}

/*
UpgradePolicyV2Delete Delete maintenance window

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id uuid of a maintenance window record
	@return UpgradePolicyV2APIUpgradePolicyV2DeleteRequest
*/
func (a *UpgradePolicyV2APIService) UpgradePolicyV2Delete(ctx context.Context, id string) UpgradePolicyV2APIUpgradePolicyV2DeleteRequest {
	return UpgradePolicyV2APIUpgradePolicyV2DeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceV2DeleteMaintenanceWindowResponse
func (a *UpgradePolicyV2APIService) UpgradePolicyV2DeleteExecute(r UpgradePolicyV2APIUpgradePolicyV2DeleteRequest) (*ServiceV2DeleteMaintenanceWindowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ServiceV2DeleteMaintenanceWindowResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "UpgradePolicyV2APIService.UpgradePolicyV2Delete")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/v2/maintenance_windows/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpgradePolicyV2APIUpgradePolicyV2GetRequest struct {
	ctx        context.Context
	ApiService UpgradePolicyV2API
	id         string
}

func (r UpgradePolicyV2APIUpgradePolicyV2GetRequest) Execute() (*ServiceV2GetMaintenanceWindowResponse, *http.Response, error) {
	return r.ApiService.UpgradePolicyV2GetExecute(r)
}

/*
UpgradePolicyV2Get Read a maintenance window

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id uuid of a maintenance window record
	@return UpgradePolicyV2APIUpgradePolicyV2GetRequest
*/
func (a *UpgradePolicyV2APIService) UpgradePolicyV2Get(ctx context.Context, id string) UpgradePolicyV2APIUpgradePolicyV2GetRequest {
	return UpgradePolicyV2APIUpgradePolicyV2GetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceV2GetMaintenanceWindowResponse
func (a *UpgradePolicyV2APIService) UpgradePolicyV2GetExecute(r UpgradePolicyV2APIUpgradePolicyV2GetRequest) (*ServiceV2GetMaintenanceWindowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ServiceV2GetMaintenanceWindowResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "UpgradePolicyV2APIService.UpgradePolicyV2Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/v2/maintenance_windows/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpgradePolicyV2APIUpgradePolicyV2ListRequest struct {
	ctx        context.Context
	ApiService UpgradePolicyV2API
	windowType *string
}

// window type (software or config).
func (r UpgradePolicyV2APIUpgradePolicyV2ListRequest) WindowType(windowType string) UpgradePolicyV2APIUpgradePolicyV2ListRequest {
	r.windowType = &windowType
	return r
}

func (r UpgradePolicyV2APIUpgradePolicyV2ListRequest) Execute() (*ServiceV2ListMaintenanceWindowResponse, *http.Response, error) {
	return r.ApiService.UpgradePolicyV2ListExecute(r)
}

/*
UpgradePolicyV2List List all the maintenance windows

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UpgradePolicyV2APIUpgradePolicyV2ListRequest
*/
func (a *UpgradePolicyV2APIService) UpgradePolicyV2List(ctx context.Context) UpgradePolicyV2APIUpgradePolicyV2ListRequest {
	return UpgradePolicyV2APIUpgradePolicyV2ListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceV2ListMaintenanceWindowResponse
func (a *UpgradePolicyV2APIService) UpgradePolicyV2ListExecute(r UpgradePolicyV2APIUpgradePolicyV2ListRequest) (*ServiceV2ListMaintenanceWindowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ServiceV2ListMaintenanceWindowResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "UpgradePolicyV2APIService.UpgradePolicyV2List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/v2/maintenance_windows"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.windowType != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "window_type", r.windowType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpgradePolicyV2APIUpgradePolicyV2UpdateRequest struct {
	ctx        context.Context
	ApiService UpgradePolicyV2API
	id         string
	body       *ServiceV2UpdateMaintenanceWindowRequest
}

func (r UpgradePolicyV2APIUpgradePolicyV2UpdateRequest) Body(body ServiceV2UpdateMaintenanceWindowRequest) UpgradePolicyV2APIUpgradePolicyV2UpdateRequest {
	r.body = &body
	return r
}

func (r UpgradePolicyV2APIUpgradePolicyV2UpdateRequest) Execute() (*ServiceV2UpdateMaintenanceWindowResponse, *http.Response, error) {
	return r.ApiService.UpgradePolicyV2UpdateExecute(r)
}

/*
UpgradePolicyV2Update Update an existing maintenance window

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id uuid of a maintenance window record
	@return UpgradePolicyV2APIUpgradePolicyV2UpdateRequest
*/
func (a *UpgradePolicyV2APIService) UpgradePolicyV2Update(ctx context.Context, id string) UpgradePolicyV2APIUpgradePolicyV2UpdateRequest {
	return UpgradePolicyV2APIUpgradePolicyV2UpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceV2UpdateMaintenanceWindowResponse
func (a *UpgradePolicyV2APIService) UpgradePolicyV2UpdateExecute(r UpgradePolicyV2APIUpgradePolicyV2UpdateRequest) (*ServiceV2UpdateMaintenanceWindowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ServiceV2UpdateMaintenanceWindowResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "UpgradePolicyV2APIService.UpgradePolicyV2Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/v2/maintenance_windows/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
