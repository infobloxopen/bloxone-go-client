/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"encoding/json"
)

// checks if the ServiceV2BatchMaintenanceWindowRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceV2BatchMaintenanceWindowRequest{}

// ServiceV2BatchMaintenanceWindowRequest struct for ServiceV2BatchMaintenanceWindowRequest
type ServiceV2BatchMaintenanceWindowRequest struct {
	Payload              *ServiceV2BatchMaintenanceWindow `json:"payload,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceV2BatchMaintenanceWindowRequest ServiceV2BatchMaintenanceWindowRequest

// NewServiceV2BatchMaintenanceWindowRequest instantiates a new ServiceV2BatchMaintenanceWindowRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceV2BatchMaintenanceWindowRequest() *ServiceV2BatchMaintenanceWindowRequest {
	this := ServiceV2BatchMaintenanceWindowRequest{}
	return &this
}

// NewServiceV2BatchMaintenanceWindowRequestWithDefaults instantiates a new ServiceV2BatchMaintenanceWindowRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceV2BatchMaintenanceWindowRequestWithDefaults() *ServiceV2BatchMaintenanceWindowRequest {
	this := ServiceV2BatchMaintenanceWindowRequest{}
	return &this
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *ServiceV2BatchMaintenanceWindowRequest) GetPayload() ServiceV2BatchMaintenanceWindow {
	if o == nil || IsNil(o.Payload) {
		var ret ServiceV2BatchMaintenanceWindow
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceV2BatchMaintenanceWindowRequest) GetPayloadOk() (*ServiceV2BatchMaintenanceWindow, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ServiceV2BatchMaintenanceWindowRequest) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given ServiceV2BatchMaintenanceWindow and assigns it to the Payload field.
func (o *ServiceV2BatchMaintenanceWindowRequest) SetPayload(v ServiceV2BatchMaintenanceWindow) {
	o.Payload = &v
}

func (o ServiceV2BatchMaintenanceWindowRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceV2BatchMaintenanceWindowRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceV2BatchMaintenanceWindowRequest) UnmarshalJSON(data []byte) (err error) {
	varServiceV2BatchMaintenanceWindowRequest := _ServiceV2BatchMaintenanceWindowRequest{}

	err = json.Unmarshal(data, &varServiceV2BatchMaintenanceWindowRequest)

	if err != nil {
		return err
	}

	*o = ServiceV2BatchMaintenanceWindowRequest(varServiceV2BatchMaintenanceWindowRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceV2BatchMaintenanceWindowRequest struct {
	value *ServiceV2BatchMaintenanceWindowRequest
	isSet bool
}

func (v NullableServiceV2BatchMaintenanceWindowRequest) Get() *ServiceV2BatchMaintenanceWindowRequest {
	return v.value
}

func (v *NullableServiceV2BatchMaintenanceWindowRequest) Set(val *ServiceV2BatchMaintenanceWindowRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceV2BatchMaintenanceWindowRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceV2BatchMaintenanceWindowRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceV2BatchMaintenanceWindowRequest(val *ServiceV2BatchMaintenanceWindowRequest) *NullableServiceV2BatchMaintenanceWindowRequest {
	return &NullableServiceV2BatchMaintenanceWindowRequest{value: val, isSet: true}
}

func (v NullableServiceV2BatchMaintenanceWindowRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceV2BatchMaintenanceWindowRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
