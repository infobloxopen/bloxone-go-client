/*
Schedule Software/Config Updates

Testing UpgradePolicyV2APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package upgradepolicy

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/infobloxopen/bloxone-go-client/upgradepolicy"
)

func TestUpgradePolicyV2APIService(t *testing.T) {

	apiClient := upgradepolicy.NewAPIClient()

	t.Run("Test UpgradePolicyV2APIService UpgradePolicyV2ApplyConfigNow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UpgradePolicyV2API.UpgradePolicyV2ApplyConfigNow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradePolicyV2APIService UpgradePolicyV2Batch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UpgradePolicyV2API.UpgradePolicyV2Batch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradePolicyV2APIService UpgradePolicyV2Create", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UpgradePolicyV2API.UpgradePolicyV2Create(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradePolicyV2APIService UpgradePolicyV2Delete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.UpgradePolicyV2API.UpgradePolicyV2Delete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradePolicyV2APIService UpgradePolicyV2Get", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.UpgradePolicyV2API.UpgradePolicyV2Get(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradePolicyV2APIService UpgradePolicyV2List", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UpgradePolicyV2API.UpgradePolicyV2List(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradePolicyV2APIService UpgradePolicyV2Update", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.UpgradePolicyV2API.UpgradePolicyV2Update(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
